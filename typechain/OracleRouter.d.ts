/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OracleRouterInterface extends ethers.utils.Interface {
  functions: {
    "FUSD()": FunctionFragment;
    "ORACLE_TYPE_CHAINLINK()": FunctionFragment;
    "ORACLE_TYPE_DEX()": FunctionFragment;
    "ORACLE_TYPE_QUARTERLY_CONTRACT()": FunctionFragment;
    "__AdminUpgradeable_init(address)": FunctionFragment;
    "addChainlinkOracle(bytes32,address,bool)": FunctionFragment;
    "addChainlinkOracles(bytes32[],address[],bool)": FunctionFragment;
    "addDexOracle(bytes32,address,bool)": FunctionFragment;
    "addDexOracles(bytes32[],address[],bool)": FunctionFragment;
    "addQuarterlyContractOracle(bytes32,address,bool)": FunctionFragment;
    "addQuarterlyContractOracles(bytes32[],address[],bool)": FunctionFragment;
    "admin()": FunctionFragment;
    "becomeAdmin()": FunctionFragment;
    "candidate()": FunctionFragment;
    "exchange(bytes32,uint256,bytes32)": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "getPriceAndUpdatedTime(bytes32)": FunctionFragment;
    "getStalePeriodForCurrency(bytes32)": FunctionFragment;
    "globalStalePeriod()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isFrozen(bytes32)": FunctionFragment;
    "isPriceStaled(bytes32)": FunctionFragment;
    "oracleSettings(bytes32)": FunctionFragment;
    "removeOracle(bytes32)": FunctionFragment;
    "setCandidate(address)": FunctionFragment;
    "setFrozen(bytes32,bool)": FunctionFragment;
    "setGlobalStalePeriod(uint256)": FunctionFragment;
    "setStalePeriodOverride(bytes32,uint256)": FunctionFragment;
    "stalePeriodOverrides(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "FUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ORACLE_TYPE_CHAINLINK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_TYPE_DEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_TYPE_QUARTERLY_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__AdminUpgradeable_init",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addChainlinkOracle",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addChainlinkOracles",
    values: [BytesLike[], string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addDexOracle",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addDexOracles",
    values: [BytesLike[], string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addQuarterlyContractOracle",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addQuarterlyContractOracles",
    values: [BytesLike[], string[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "becomeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getPriceAndUpdatedTime",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStalePeriodForCurrency",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalStalePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "isFrozen", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isPriceStaled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleSettings",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOracle",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCandidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFrozen",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalStalePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStalePeriodOverride",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stalePeriodOverrides",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "FUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_TYPE_CHAINLINK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_TYPE_DEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_TYPE_QUARTERLY_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__AdminUpgradeable_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addChainlinkOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addChainlinkOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDexOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDexOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addQuarterlyContractOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addQuarterlyContractOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "becomeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceAndUpdatedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStalePeriodForCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalStalePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPriceStaled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalStalePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStalePeriodOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stalePeriodOverrides",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "CandidateChanged(address,address)": EventFragment;
    "ChainlinkOracleAdded(bytes32,address)": EventFragment;
    "GlobalStalePeriodUpdated(uint256,uint256)": EventFragment;
    "OracleRemoved(bytes32,address)": EventFragment;
    "QuarterlyContractOracleAdded(bytes32,address)": EventFragment;
    "StalePeriodOverrideUpdated(bytes32,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CandidateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkOracleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlobalStalePeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "QuarterlyContractOracleAdded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StalePeriodOverrideUpdated"): EventFragment;
}

export class OracleRouter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OracleRouterInterface;

  functions: {
    FUSD(overrides?: CallOverrides): Promise<[string]>;

    "FUSD()"(overrides?: CallOverrides): Promise<[string]>;

    ORACLE_TYPE_CHAINLINK(overrides?: CallOverrides): Promise<[number]>;

    "ORACLE_TYPE_CHAINLINK()"(overrides?: CallOverrides): Promise<[number]>;

    ORACLE_TYPE_DEX(overrides?: CallOverrides): Promise<[number]>;

    "ORACLE_TYPE_DEX()"(overrides?: CallOverrides): Promise<[number]>;

    ORACLE_TYPE_QUARTERLY_CONTRACT(
      overrides?: CallOverrides
    ): Promise<[number]>;

    "ORACLE_TYPE_QUARTERLY_CONTRACT()"(
      overrides?: CallOverrides
    ): Promise<[number]>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addChainlinkOracle(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addChainlinkOracle(bytes32,address,bool)"(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addChainlinkOracles(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addChainlinkOracles(bytes32[],address[],bool)"(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addDexOracle(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addDexOracle(bytes32,address,bool)"(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addDexOracles(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addDexOracles(bytes32[],address[],bool)"(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addQuarterlyContractOracle(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addQuarterlyContractOracle(bytes32,address,bool)"(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addQuarterlyContractOracles(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addQuarterlyContractOracles(bytes32[],address[],bool)"(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    "admin()"(overrides?: CallOverrides): Promise<[string]>;

    becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "exchange(bytes32,uint256,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPrice(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; time: BigNumber }>;

    "getPriceAndUpdatedTime(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; time: BigNumber }>;

    getStalePeriodForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getStalePeriodForCurrency(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    globalStalePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "globalStalePeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPriceStaled(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isPriceStaled(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oracleSettings(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string] & { oracleType: number; oracleAddress: string }
    >;

    "oracleSettings(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string] & { oracleType: number; oracleAddress: string }
    >;

    removeOracle(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeOracle(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFrozen(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFrozen(bytes32,bool)"(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGlobalStalePeriod(
      newStalePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGlobalStalePeriod(uint256)"(
      newStalePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStalePeriodOverride(
      currencyKey: BytesLike,
      newStalePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStalePeriodOverride(bytes32,uint256)"(
      currencyKey: BytesLike,
      newStalePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stalePeriodOverrides(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "stalePeriodOverrides(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  FUSD(overrides?: CallOverrides): Promise<string>;

  "FUSD()"(overrides?: CallOverrides): Promise<string>;

  ORACLE_TYPE_CHAINLINK(overrides?: CallOverrides): Promise<number>;

  "ORACLE_TYPE_CHAINLINK()"(overrides?: CallOverrides): Promise<number>;

  ORACLE_TYPE_DEX(overrides?: CallOverrides): Promise<number>;

  "ORACLE_TYPE_DEX()"(overrides?: CallOverrides): Promise<number>;

  ORACLE_TYPE_QUARTERLY_CONTRACT(overrides?: CallOverrides): Promise<number>;

  "ORACLE_TYPE_QUARTERLY_CONTRACT()"(
    overrides?: CallOverrides
  ): Promise<number>;

  __AdminUpgradeable_init(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__AdminUpgradeable_init(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addChainlinkOracle(
    currencyKey: BytesLike,
    oracleAddress: string,
    removeExisting: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addChainlinkOracle(bytes32,address,bool)"(
    currencyKey: BytesLike,
    oracleAddress: string,
    removeExisting: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addChainlinkOracles(
    currencyKeys: BytesLike[],
    oracleAddresses: string[],
    removeExisting: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addChainlinkOracles(bytes32[],address[],bool)"(
    currencyKeys: BytesLike[],
    oracleAddresses: string[],
    removeExisting: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addDexOracle(
    currencyKey: BytesLike,
    oracleAddress: string,
    removeExisting: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addDexOracle(bytes32,address,bool)"(
    currencyKey: BytesLike,
    oracleAddress: string,
    removeExisting: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addDexOracles(
    currencyKeys: BytesLike[],
    oracleAddresses: string[],
    removeExisting: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addDexOracles(bytes32[],address[],bool)"(
    currencyKeys: BytesLike[],
    oracleAddresses: string[],
    removeExisting: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addQuarterlyContractOracle(
    currencyKey: BytesLike,
    oracleAddress: string,
    removeExisting: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addQuarterlyContractOracle(bytes32,address,bool)"(
    currencyKey: BytesLike,
    oracleAddress: string,
    removeExisting: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addQuarterlyContractOracles(
    currencyKeys: BytesLike[],
    oracleAddresses: string[],
    removeExisting: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addQuarterlyContractOracles(bytes32[],address[],bool)"(
    currencyKeys: BytesLike[],
    oracleAddresses: string[],
    removeExisting: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  exchange(
    sourceKey: BytesLike,
    sourceAmount: BigNumberish,
    destKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "exchange(bytes32,uint256,bytes32)"(
    sourceKey: BytesLike,
    sourceAmount: BigNumberish,
    destKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPrice(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceAndUpdatedTime(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { price: BigNumber; time: BigNumber }>;

  "getPriceAndUpdatedTime(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { price: BigNumber; time: BigNumber }>;

  getStalePeriodForCurrency(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getStalePeriodForCurrency(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  globalStalePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "globalStalePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isFrozen(currencyKey: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "isFrozen(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPriceStaled(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPriceStaled(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oracleSettings(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string] & { oracleType: number; oracleAddress: string }>;

  "oracleSettings(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string] & { oracleType: number; oracleAddress: string }>;

  removeOracle(
    currencyKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeOracle(bytes32)"(
    currencyKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCandidate(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCandidate(address)"(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFrozen(
    currencyKey: BytesLike,
    frozen: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFrozen(bytes32,bool)"(
    currencyKey: BytesLike,
    frozen: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGlobalStalePeriod(
    newStalePeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGlobalStalePeriod(uint256)"(
    newStalePeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStalePeriodOverride(
    currencyKey: BytesLike,
    newStalePeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStalePeriodOverride(bytes32,uint256)"(
    currencyKey: BytesLike,
    newStalePeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stalePeriodOverrides(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "stalePeriodOverrides(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    FUSD(overrides?: CallOverrides): Promise<string>;

    "FUSD()"(overrides?: CallOverrides): Promise<string>;

    ORACLE_TYPE_CHAINLINK(overrides?: CallOverrides): Promise<number>;

    "ORACLE_TYPE_CHAINLINK()"(overrides?: CallOverrides): Promise<number>;

    ORACLE_TYPE_DEX(overrides?: CallOverrides): Promise<number>;

    "ORACLE_TYPE_DEX()"(overrides?: CallOverrides): Promise<number>;

    ORACLE_TYPE_QUARTERLY_CONTRACT(overrides?: CallOverrides): Promise<number>;

    "ORACLE_TYPE_QUARTERLY_CONTRACT()"(
      overrides?: CallOverrides
    ): Promise<number>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addChainlinkOracle(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addChainlinkOracle(bytes32,address,bool)"(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addChainlinkOracles(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addChainlinkOracles(bytes32[],address[],bool)"(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addDexOracle(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addDexOracle(bytes32,address,bool)"(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addDexOracles(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addDexOracles(bytes32[],address[],bool)"(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addQuarterlyContractOracle(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addQuarterlyContractOracle(bytes32,address,bool)"(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addQuarterlyContractOracles(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addQuarterlyContractOracles(bytes32[],address[],bool)"(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    becomeAdmin(overrides?: CallOverrides): Promise<void>;

    "becomeAdmin()"(overrides?: CallOverrides): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchange(bytes32,uint256,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; time: BigNumber }>;

    "getPriceAndUpdatedTime(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; time: BigNumber }>;

    getStalePeriodForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStalePeriodForCurrency(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalStalePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "globalStalePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_admin: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPriceStaled(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPriceStaled(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracleSettings(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string] & { oracleType: number; oracleAddress: string }
    >;

    "oracleSettings(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string] & { oracleType: number; oracleAddress: string }
    >;

    removeOracle(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeOracle(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setCandidate(_candidate: string, overrides?: CallOverrides): Promise<void>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFrozen(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFrozen(bytes32,bool)"(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalStalePeriod(
      newStalePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGlobalStalePeriod(uint256)"(
      newStalePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStalePeriodOverride(
      currencyKey: BytesLike,
      newStalePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStalePeriodOverride(bytes32,uint256)"(
      currencyKey: BytesLike,
      newStalePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stalePeriodOverrides(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stalePeriodOverrides(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AdminChanged(oldAdmin: null, newAdmin: null): EventFilter;

    CandidateChanged(oldCandidate: null, newCandidate: null): EventFilter;

    ChainlinkOracleAdded(currencyKey: null, oracle: null): EventFilter;

    GlobalStalePeriodUpdated(
      oldStalePeriod: null,
      newStalePeriod: null
    ): EventFilter;

    OracleRemoved(currencyKey: null, oracle: null): EventFilter;

    QuarterlyContractOracleAdded(currencyKey: null, oracle: null): EventFilter;

    StalePeriodOverrideUpdated(
      currencyKey: null,
      oldStalePeriod: null,
      newStalePeriod: null
    ): EventFilter;
  };

  estimateGas: {
    FUSD(overrides?: CallOverrides): Promise<BigNumber>;

    "FUSD()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE_TYPE_CHAINLINK(overrides?: CallOverrides): Promise<BigNumber>;

    "ORACLE_TYPE_CHAINLINK()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE_TYPE_DEX(overrides?: CallOverrides): Promise<BigNumber>;

    "ORACLE_TYPE_DEX()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE_TYPE_QUARTERLY_CONTRACT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ORACLE_TYPE_QUARTERLY_CONTRACT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addChainlinkOracle(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addChainlinkOracle(bytes32,address,bool)"(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addChainlinkOracles(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addChainlinkOracles(bytes32[],address[],bool)"(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addDexOracle(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addDexOracle(bytes32,address,bool)"(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addDexOracles(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addDexOracles(bytes32[],address[],bool)"(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addQuarterlyContractOracle(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addQuarterlyContractOracle(bytes32,address,bool)"(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addQuarterlyContractOracles(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addQuarterlyContractOracles(bytes32[],address[],bool)"(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    becomeAdmin(overrides?: Overrides): Promise<BigNumber>;

    "becomeAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchange(bytes32,uint256,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceAndUpdatedTime(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStalePeriodForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStalePeriodForCurrency(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalStalePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "globalStalePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_admin: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPriceStaled(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPriceStaled(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleSettings(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oracleSettings(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeOracle(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeOracle(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCandidate(_candidate: string, overrides?: Overrides): Promise<BigNumber>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFrozen(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFrozen(bytes32,bool)"(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGlobalStalePeriod(
      newStalePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGlobalStalePeriod(uint256)"(
      newStalePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStalePeriodOverride(
      currencyKey: BytesLike,
      newStalePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStalePeriodOverride(bytes32,uint256)"(
      currencyKey: BytesLike,
      newStalePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stalePeriodOverrides(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stalePeriodOverrides(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FUSD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE_TYPE_CHAINLINK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ORACLE_TYPE_CHAINLINK()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ORACLE_TYPE_DEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ORACLE_TYPE_DEX()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ORACLE_TYPE_QUARTERLY_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ORACLE_TYPE_QUARTERLY_CONTRACT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addChainlinkOracle(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addChainlinkOracle(bytes32,address,bool)"(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addChainlinkOracles(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addChainlinkOracles(bytes32[],address[],bool)"(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addDexOracle(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addDexOracle(bytes32,address,bool)"(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addDexOracles(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addDexOracles(bytes32[],address[],bool)"(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addQuarterlyContractOracle(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addQuarterlyContractOracle(bytes32,address,bool)"(
      currencyKey: BytesLike,
      oracleAddress: string,
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addQuarterlyContractOracles(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addQuarterlyContractOracles(bytes32[],address[],bool)"(
      currencyKeys: BytesLike[],
      oracleAddresses: string[],
      removeExisting: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    becomeAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exchange(bytes32,uint256,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceAndUpdatedTime(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStalePeriodForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStalePeriodForCurrency(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalStalePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "globalStalePeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPriceStaled(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPriceStaled(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleSettings(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oracleSettings(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeOracle(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeOracle(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFrozen(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFrozen(bytes32,bool)"(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGlobalStalePeriod(
      newStalePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGlobalStalePeriod(uint256)"(
      newStalePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStalePeriodOverride(
      currencyKey: BytesLike,
      newStalePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStalePeriodOverride(bytes32,uint256)"(
      currencyKey: BytesLike,
      newStalePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stalePeriodOverrides(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stalePeriodOverrides(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
