/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DebtSystemInterface extends ethers.utils.Interface {
  functions: {
    "GetUserCurrentDebtProportion(address,bytes32)": FunctionFragment;
    "GetUserDebtBalanceInUsd(address,bytes32)": FunctionFragment;
    "GetUserDebtData(address,bytes32)": FunctionFragment;
    "LastSystemDebtFactor()": FunctionFragment;
    "PushDebtFactor(uint256)": FunctionFragment;
    "UpdateDebt(address,uint256,uint256,bytes32)": FunctionFragment;
    "UpdateUserDebt(address,uint256,bytes32)": FunctionFragment;
    "__AdminUpgradeable_init(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "becomeAdmin()": FunctionFragment;
    "candidate()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "lastDebtFactor()": FunctionFragment;
    "setCandidate(address)": FunctionFragment;
    "updateAddressCache(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "GetUserCurrentDebtProportion",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "GetUserDebtBalanceInUsd",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "GetUserDebtData",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "LastSystemDebtFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PushDebtFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UpdateDebt",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "UpdateUserDebt",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "__AdminUpgradeable_init",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "becomeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastDebtFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCandidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAddressCache",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "GetUserCurrentDebtProportion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetUserDebtBalanceInUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetUserDebtData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LastSystemDebtFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PushDebtFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UpdateDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UpdateUserDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__AdminUpgradeable_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "becomeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDebtFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAddressCache",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "CachedAddressUpdated(bytes32,address)": EventFragment;
    "CandidateChanged(address,address)": EventFragment;
    "PushDebtLog(uint256,uint256)": EventFragment;
    "UpdateAddressStorage(address,address)": EventFragment;
    "UpdateUserDebtLog(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CachedAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CandidateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PushDebtLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAddressStorage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateUserDebtLog"): EventFragment;
}

export class DebtSystem extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DebtSystemInterface;

  functions: {
    GetUserCurrentDebtProportion(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "GetUserCurrentDebtProportion(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    GetUserDebtBalanceInUsd(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "GetUserDebtBalanceInUsd(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    GetUserDebtData(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtProportion: BigNumber;
        debtFactor: BigNumber;
      }
    >;

    "GetUserDebtData(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtProportion: BigNumber;
        debtFactor: BigNumber;
      }
    >;

    LastSystemDebtFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "LastSystemDebtFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PushDebtFactor(
      _factor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "PushDebtFactor(uint256)"(
      _factor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    UpdateDebt(
      _user: string,
      _debtProportion: BigNumberish,
      _factor: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "UpdateDebt(address,uint256,uint256,bytes32)"(
      _user: string,
      _debtProportion: BigNumberish,
      _factor: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    UpdateUserDebt(
      _user: string,
      _debtProportion: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "UpdateUserDebt(address,uint256,bytes32)"(
      _user: string,
      _debtProportion: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    "admin()"(overrides?: CallOverrides): Promise<[string]>;

    becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastDebtFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastDebtFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  GetUserCurrentDebtProportion(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "GetUserCurrentDebtProportion(address,bytes32)"(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GetUserDebtBalanceInUsd(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "GetUserDebtBalanceInUsd(address,bytes32)"(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  GetUserDebtData(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      debtProportion: BigNumber;
      debtFactor: BigNumber;
    }
  >;

  "GetUserDebtData(address,bytes32)"(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      debtProportion: BigNumber;
      debtFactor: BigNumber;
    }
  >;

  LastSystemDebtFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "LastSystemDebtFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  PushDebtFactor(
    _factor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "PushDebtFactor(uint256)"(
    _factor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  UpdateDebt(
    _user: string,
    _debtProportion: BigNumberish,
    _factor: BigNumberish,
    _currency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "UpdateDebt(address,uint256,uint256,bytes32)"(
    _user: string,
    _debtProportion: BigNumberish,
    _factor: BigNumberish,
    _currency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  UpdateUserDebt(
    _user: string,
    _debtProportion: BigNumberish,
    _currency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "UpdateUserDebt(address,uint256,bytes32)"(
    _user: string,
    _debtProportion: BigNumberish,
    _currency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  __AdminUpgradeable_init(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__AdminUpgradeable_init(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastDebtFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "lastDebtFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  setCandidate(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCandidate(address)"(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAddressCache(
    _addressStorage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAddressCache(address)"(
    _addressStorage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    GetUserCurrentDebtProportion(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "GetUserCurrentDebtProportion(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetUserDebtBalanceInUsd(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "GetUserDebtBalanceInUsd(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    GetUserDebtData(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtProportion: BigNumber;
        debtFactor: BigNumber;
      }
    >;

    "GetUserDebtData(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtProportion: BigNumber;
        debtFactor: BigNumber;
      }
    >;

    LastSystemDebtFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "LastSystemDebtFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    PushDebtFactor(
      _factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "PushDebtFactor(uint256)"(
      _factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    UpdateDebt(
      _user: string,
      _debtProportion: BigNumberish,
      _factor: BigNumberish,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "UpdateDebt(address,uint256,uint256,bytes32)"(
      _user: string,
      _debtProportion: BigNumberish,
      _factor: BigNumberish,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    UpdateUserDebt(
      _user: string,
      _debtProportion: BigNumberish,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "UpdateUserDebt(address,uint256,bytes32)"(
      _user: string,
      _debtProportion: BigNumberish,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    becomeAdmin(overrides?: CallOverrides): Promise<void>;

    "becomeAdmin()"(overrides?: CallOverrides): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    initialize(_admin: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastDebtFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "lastDebtFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCandidate(_candidate: string, overrides?: CallOverrides): Promise<void>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminChanged(oldAdmin: null, newAdmin: null): EventFilter;

    CachedAddressUpdated(name: null, addr: null): EventFilter;

    CandidateChanged(oldCandidate: null, newCandidate: null): EventFilter;

    PushDebtLog(newFactor: null, timestamp: null): EventFilter;

    UpdateAddressStorage(oldAddr: null, newAddr: null): EventFilter;

    UpdateUserDebtLog(
      addr: null,
      debtProportion: null,
      debtFactor: null,
      timestamp: null
    ): EventFilter;
  };

  estimateGas: {
    GetUserCurrentDebtProportion(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "GetUserCurrentDebtProportion(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetUserDebtBalanceInUsd(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "GetUserDebtBalanceInUsd(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetUserDebtData(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "GetUserDebtData(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LastSystemDebtFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "LastSystemDebtFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    PushDebtFactor(
      _factor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "PushDebtFactor(uint256)"(
      _factor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    UpdateDebt(
      _user: string,
      _debtProportion: BigNumberish,
      _factor: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "UpdateDebt(address,uint256,uint256,bytes32)"(
      _user: string,
      _debtProportion: BigNumberish,
      _factor: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    UpdateUserDebt(
      _user: string,
      _debtProportion: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "UpdateUserDebt(address,uint256,bytes32)"(
      _user: string,
      _debtProportion: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    becomeAdmin(overrides?: Overrides): Promise<BigNumber>;

    "becomeAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_admin: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastDebtFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "lastDebtFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCandidate(_candidate: string, overrides?: Overrides): Promise<BigNumber>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GetUserCurrentDebtProportion(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "GetUserCurrentDebtProportion(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetUserDebtBalanceInUsd(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "GetUserDebtBalanceInUsd(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetUserDebtData(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "GetUserDebtData(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LastSystemDebtFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LastSystemDebtFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PushDebtFactor(
      _factor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "PushDebtFactor(uint256)"(
      _factor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    UpdateDebt(
      _user: string,
      _debtProportion: BigNumberish,
      _factor: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "UpdateDebt(address,uint256,uint256,bytes32)"(
      _user: string,
      _debtProportion: BigNumberish,
      _factor: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    UpdateUserDebt(
      _user: string,
      _debtProportion: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "UpdateUserDebt(address,uint256,bytes32)"(
      _user: string,
      _debtProportion: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    becomeAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastDebtFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastDebtFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
