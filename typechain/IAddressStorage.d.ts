/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAddressStorageInterface extends ethers.utils.Interface {
  functions: {
    "getAddress(bytes32)": FunctionFragment;
    "getAddressWithRequire(bytes32,string)": FunctionFragment;
    "update(bytes32,address)": FunctionFragment;
    "updateAll(bytes32[],address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressWithRequire",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAll",
    values: [BytesLike[], string[]]
  ): string;

  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressWithRequire",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateAll", data: BytesLike): Result;

  events: {};
}

export class IAddressStorage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAddressStorageInterface;

  functions: {
    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getAddress(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAddressWithRequire(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAddressWithRequire(bytes32,string)"(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    update(
      name: BytesLike,
      dest: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "update(bytes32,address)"(
      name: BytesLike,
      dest: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAll(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAll(bytes32[],address[])"(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getAddress(name: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getAddress(bytes32)"(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getAddressWithRequire(
    name: BytesLike,
    reason: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAddressWithRequire(bytes32,string)"(
    name: BytesLike,
    reason: string,
    overrides?: CallOverrides
  ): Promise<string>;

  update(
    name: BytesLike,
    dest: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "update(bytes32,address)"(
    name: BytesLike,
    dest: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAll(
    names: BytesLike[],
    destinations: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAll(bytes32[],address[])"(
    names: BytesLike[],
    destinations: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getAddress(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAddressWithRequire(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAddressWithRequire(bytes32,string)"(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<string>;

    update(
      name: BytesLike,
      dest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "update(bytes32,address)"(
      name: BytesLike,
      dest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAll(
      names: BytesLike[],
      destinations: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAll(bytes32[],address[])"(
      names: BytesLike[],
      destinations: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getAddress(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressWithRequire(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAddressWithRequire(bytes32,string)"(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update(
      name: BytesLike,
      dest: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "update(bytes32,address)"(
      name: BytesLike,
      dest: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAll(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAll(bytes32[],address[])"(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAddress(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddress(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressWithRequire(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddressWithRequire(bytes32,string)"(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update(
      name: BytesLike,
      dest: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "update(bytes32,address)"(
      name: BytesLike,
      dest: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAll(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAll(bytes32[],address[])"(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
