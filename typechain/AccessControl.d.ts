/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AccessControlInterface extends ethers.utils.Interface {
  functions: {
    "BURN_ASSET_ROLE()": FunctionFragment;
    "DEBT_SYSTEM()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ISSUE_ASSET_ROLE()": FunctionFragment;
    "IsAdmin(address)": FunctionFragment;
    "ROLE_ORACLE_SERVER()": FunctionFragment;
    "SetAdmin(address)": FunctionFragment;
    "SetBurnAssetRole(address[],bool[])": FunctionFragment;
    "SetDebtSystemRole(address[],bool[])": FunctionFragment;
    "SetIssueAssetRole(address[],bool[])": FunctionFragment;
    "SetOracleServerRole(address[],bool[])": FunctionFragment;
    "SetRoles(bytes32,address[],bool[])": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BURN_ASSET_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEBT_SYSTEM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ISSUE_ASSET_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "IsAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ROLE_ORACLE_SERVER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SetAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "SetBurnAssetRole",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "SetDebtSystemRole",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "SetIssueAssetRole",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "SetOracleServerRole",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "SetRoles",
    values: [BytesLike, string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BURN_ASSET_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEBT_SYSTEM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ISSUE_ASSET_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "IsAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ORACLE_SERVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SetAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SetBurnAssetRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetDebtSystemRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetIssueAssetRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetOracleServerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SetRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class AccessControl extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AccessControlInterface;

  functions: {
    BURN_ASSET_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "BURN_ASSET_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    DEBT_SYSTEM(overrides?: CallOverrides): Promise<[string]>;

    "DEBT_SYSTEM()"(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    ISSUE_ASSET_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ISSUE_ASSET_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    IsAdmin(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    "IsAdmin(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ROLE_ORACLE_SERVER(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_ORACLE_SERVER()"(overrides?: CallOverrides): Promise<[string]>;

    SetAdmin(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SetAdmin(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SetBurnAssetRole(
      burner: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SetBurnAssetRole(address[],bool[])"(
      burner: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SetDebtSystemRole(
      _address: string[],
      _setTo: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SetDebtSystemRole(address[],bool[])"(
      _address: string[],
      _setTo: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SetIssueAssetRole(
      issuer: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SetIssueAssetRole(address[],bool[])"(
      issuer: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SetOracleServerRole(
      server: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SetOracleServerRole(address[],bool[])"(
      server: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SetRoles(
      roleType: BytesLike,
      addresses: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SetRoles(bytes32,address[],bool[])"(
      roleType: BytesLike,
      addresses: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  BURN_ASSET_ROLE(overrides?: CallOverrides): Promise<string>;

  "BURN_ASSET_ROLE()"(overrides?: CallOverrides): Promise<string>;

  DEBT_SYSTEM(overrides?: CallOverrides): Promise<string>;

  "DEBT_SYSTEM()"(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  ISSUE_ASSET_ROLE(overrides?: CallOverrides): Promise<string>;

  "ISSUE_ASSET_ROLE()"(overrides?: CallOverrides): Promise<string>;

  IsAdmin(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "IsAdmin(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ROLE_ORACLE_SERVER(overrides?: CallOverrides): Promise<string>;

  "ROLE_ORACLE_SERVER()"(overrides?: CallOverrides): Promise<string>;

  SetAdmin(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SetAdmin(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SetBurnAssetRole(
    burner: string[],
    setTo: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SetBurnAssetRole(address[],bool[])"(
    burner: string[],
    setTo: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SetDebtSystemRole(
    _address: string[],
    _setTo: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SetDebtSystemRole(address[],bool[])"(
    _address: string[],
    _setTo: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SetIssueAssetRole(
    issuer: string[],
    setTo: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SetIssueAssetRole(address[],bool[])"(
    issuer: string[],
    setTo: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SetOracleServerRole(
    server: string[],
    setTo: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SetOracleServerRole(address[],bool[])"(
    server: string[],
    setTo: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SetRoles(
    roleType: BytesLike,
    addresses: string[],
    setTo: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SetRoles(bytes32,address[],bool[])"(
    roleType: BytesLike,
    addresses: string[],
    setTo: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    BURN_ASSET_ROLE(overrides?: CallOverrides): Promise<string>;

    "BURN_ASSET_ROLE()"(overrides?: CallOverrides): Promise<string>;

    DEBT_SYSTEM(overrides?: CallOverrides): Promise<string>;

    "DEBT_SYSTEM()"(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    ISSUE_ASSET_ROLE(overrides?: CallOverrides): Promise<string>;

    "ISSUE_ASSET_ROLE()"(overrides?: CallOverrides): Promise<string>;

    IsAdmin(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "IsAdmin(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ROLE_ORACLE_SERVER(overrides?: CallOverrides): Promise<string>;

    "ROLE_ORACLE_SERVER()"(overrides?: CallOverrides): Promise<string>;

    SetAdmin(_address: string, overrides?: CallOverrides): Promise<void>;

    "SetAdmin(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    SetBurnAssetRole(
      burner: string[],
      setTo: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    "SetBurnAssetRole(address[],bool[])"(
      burner: string[],
      setTo: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    SetDebtSystemRole(
      _address: string[],
      _setTo: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    "SetDebtSystemRole(address[],bool[])"(
      _address: string[],
      _setTo: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    SetIssueAssetRole(
      issuer: string[],
      setTo: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    "SetIssueAssetRole(address[],bool[])"(
      issuer: string[],
      setTo: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    SetOracleServerRole(
      server: string[],
      setTo: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    "SetOracleServerRole(address[],bool[])"(
      server: string[],
      setTo: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    SetRoles(
      roleType: BytesLike,
      addresses: string[],
      setTo: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    "SetRoles(bytes32,address[],bool[])"(
      roleType: BytesLike,
      addresses: string[],
      setTo: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(admin: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;
  };

  estimateGas: {
    BURN_ASSET_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "BURN_ASSET_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEBT_SYSTEM(overrides?: CallOverrides): Promise<BigNumber>;

    "DEBT_SYSTEM()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    ISSUE_ASSET_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ISSUE_ASSET_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    IsAdmin(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "IsAdmin(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ROLE_ORACLE_SERVER(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_ORACLE_SERVER()"(overrides?: CallOverrides): Promise<BigNumber>;

    SetAdmin(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "SetAdmin(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    SetBurnAssetRole(
      burner: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SetBurnAssetRole(address[],bool[])"(
      burner: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    SetDebtSystemRole(
      _address: string[],
      _setTo: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SetDebtSystemRole(address[],bool[])"(
      _address: string[],
      _setTo: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    SetIssueAssetRole(
      issuer: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SetIssueAssetRole(address[],bool[])"(
      issuer: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    SetOracleServerRole(
      server: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SetOracleServerRole(address[],bool[])"(
      server: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    SetRoles(
      roleType: BytesLike,
      addresses: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SetRoles(bytes32,address[],bool[])"(
      roleType: BytesLike,
      addresses: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(admin: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BURN_ASSET_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BURN_ASSET_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEBT_SYSTEM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DEBT_SYSTEM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ISSUE_ASSET_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ISSUE_ASSET_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IsAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "IsAdmin(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_ORACLE_SERVER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROLE_ORACLE_SERVER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SetAdmin(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SetAdmin(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SetBurnAssetRole(
      burner: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SetBurnAssetRole(address[],bool[])"(
      burner: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SetDebtSystemRole(
      _address: string[],
      _setTo: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SetDebtSystemRole(address[],bool[])"(
      _address: string[],
      _setTo: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SetIssueAssetRole(
      issuer: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SetIssueAssetRole(address[],bool[])"(
      issuer: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SetOracleServerRole(
      server: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SetOracleServerRole(address[],bool[])"(
      server: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SetRoles(
      roleType: BytesLike,
      addresses: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SetRoles(bytes32,address[],bool[])"(
      roleType: BytesLike,
      addresses: string[],
      setTo: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
