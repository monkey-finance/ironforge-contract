/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IPricesInterface extends ethers.utils.Interface {
  functions: {
    "FUSD()": FunctionFragment;
    "exchange(bytes32,uint256,bytes32)": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "isFrozen(bytes32)": FunctionFragment;
    "setFrozen(bytes32,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "FUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "isFrozen", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setFrozen",
    values: [BytesLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "FUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFrozen", data: BytesLike): Result;

  events: {};
}

export class IPrices extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPricesInterface;

  functions: {
    FUSD(overrides?: CallOverrides): Promise<[string]>;

    "FUSD()"(overrides?: CallOverrides): Promise<[string]>;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "exchange(bytes32,uint256,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPrice(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setFrozen(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFrozen(bytes32,bool)"(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  FUSD(overrides?: CallOverrides): Promise<string>;

  "FUSD()"(overrides?: CallOverrides): Promise<string>;

  exchange(
    sourceKey: BytesLike,
    sourceAmount: BigNumberish,
    destKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "exchange(bytes32,uint256,bytes32)"(
    sourceKey: BytesLike,
    sourceAmount: BigNumberish,
    destKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPrice(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isFrozen(currencyKey: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "isFrozen(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setFrozen(
    currencyKey: BytesLike,
    frozen: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFrozen(bytes32,bool)"(
    currencyKey: BytesLike,
    frozen: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    FUSD(overrides?: CallOverrides): Promise<string>;

    "FUSD()"(overrides?: CallOverrides): Promise<string>;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchange(bytes32,uint256,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFrozen(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFrozen(bytes32,bool)"(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    FUSD(overrides?: CallOverrides): Promise<BigNumber>;

    "FUSD()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchange(bytes32,uint256,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFrozen(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFrozen(bytes32,bool)"(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FUSD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exchange(bytes32,uint256,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFrozen(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFrozen(bytes32,bool)"(
      currencyKey: BytesLike,
      frozen: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
