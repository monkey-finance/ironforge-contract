/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LinearReleaseInterface extends ethers.utils.Interface {
  functions: {
    "calLockAmount(uint256)": FunctionFragment;
    "getLocks(address,uint256)": FunctionFragment;
    "initialize(address,uint256,uint256,address)": FunctionFragment;
    "lock(address,uint256,uint256)": FunctionFragment;
    "lockOf(address,uint256)": FunctionFragment;
    "locks(address,uint256)": FunctionFragment;
    "lockupBps()": FunctionFragment;
    "minerReward()": FunctionFragment;
    "pendingTokens(address,uint256)": FunctionFragment;
    "periodBlocks()": FunctionFragment;
    "rewardToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calLockAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocks",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "locks",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lockupBps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minerReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockupBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "Lock(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lock"): EventFragment;
}

export class LinearRelease extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LinearReleaseInterface;

  functions: {
    calLockAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calLockAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLocks(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLocks(address,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _token: string,
      _lockupBps: BigNumberish,
      _periodBlocks: BigNumberish,
      _minerRewardAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint256,uint256,address)"(
      _token: string,
      _lockupBps: BigNumberish,
      _periodBlocks: BigNumberish,
      _minerRewardAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lock(
      _user: string,
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lock(address,uint256,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lockOf(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          lastUnlockBlock: BigNumber;
          locks: BigNumber;
          startReleaseBlock: BigNumber;
          endReleaseBlock: BigNumber;
        }
      ]
    >;

    "lockOf(address,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          lastUnlockBlock: BigNumber;
          locks: BigNumber;
          startReleaseBlock: BigNumber;
          endReleaseBlock: BigNumber;
        }
      ]
    >;

    locks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastUnlockBlock: BigNumber;
        locks: BigNumber;
        startReleaseBlock: BigNumber;
        endReleaseBlock: BigNumber;
      }
    >;

    "locks(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastUnlockBlock: BigNumber;
        locks: BigNumber;
        startReleaseBlock: BigNumber;
        endReleaseBlock: BigNumber;
      }
    >;

    lockupBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockupBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minerReward(overrides?: CallOverrides): Promise<[string]>;

    "minerReward()"(overrides?: CallOverrides): Promise<[string]>;

    pendingTokens(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingTokens(address,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    periodBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodBlocks()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "rewardToken()"(overrides?: CallOverrides): Promise<[string]>;
  };

  calLockAmount(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calLockAmount(uint256)"(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLocks(
    _user: string,
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLocks(address,uint256)"(
    _user: string,
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _token: string,
    _lockupBps: BigNumberish,
    _periodBlocks: BigNumberish,
    _minerRewardAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint256,uint256,address)"(
    _token: string,
    _lockupBps: BigNumberish,
    _periodBlocks: BigNumberish,
    _minerRewardAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lock(
    _user: string,
    _poolId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lock(address,uint256,uint256)"(
    _user: string,
    _poolId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lockOf(
    _user: string,
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      lastUnlockBlock: BigNumber;
      locks: BigNumber;
      startReleaseBlock: BigNumber;
      endReleaseBlock: BigNumber;
    }
  >;

  "lockOf(address,uint256)"(
    _user: string,
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      lastUnlockBlock: BigNumber;
      locks: BigNumber;
      startReleaseBlock: BigNumber;
      endReleaseBlock: BigNumber;
    }
  >;

  locks(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      lastUnlockBlock: BigNumber;
      locks: BigNumber;
      startReleaseBlock: BigNumber;
      endReleaseBlock: BigNumber;
    }
  >;

  "locks(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      lastUnlockBlock: BigNumber;
      locks: BigNumber;
      startReleaseBlock: BigNumber;
      endReleaseBlock: BigNumber;
    }
  >;

  lockupBps(overrides?: CallOverrides): Promise<BigNumber>;

  "lockupBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  minerReward(overrides?: CallOverrides): Promise<string>;

  "minerReward()"(overrides?: CallOverrides): Promise<string>;

  pendingTokens(
    _user: string,
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingTokens(address,uint256)"(
    _user: string,
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  periodBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  "periodBlocks()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "rewardToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    calLockAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calLockAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocks(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLocks(address,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _token: string,
      _lockupBps: BigNumberish,
      _periodBlocks: BigNumberish,
      _minerRewardAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint256,uint256,address)"(
      _token: string,
      _lockupBps: BigNumberish,
      _periodBlocks: BigNumberish,
      _minerRewardAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lock(
      _user: string,
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lock(address,uint256,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockOf(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastUnlockBlock: BigNumber;
        locks: BigNumber;
        startReleaseBlock: BigNumber;
        endReleaseBlock: BigNumber;
      }
    >;

    "lockOf(address,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastUnlockBlock: BigNumber;
        locks: BigNumber;
        startReleaseBlock: BigNumber;
        endReleaseBlock: BigNumber;
      }
    >;

    locks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastUnlockBlock: BigNumber;
        locks: BigNumber;
        startReleaseBlock: BigNumber;
        endReleaseBlock: BigNumber;
      }
    >;

    "locks(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastUnlockBlock: BigNumber;
        locks: BigNumber;
        startReleaseBlock: BigNumber;
        endReleaseBlock: BigNumber;
      }
    >;

    lockupBps(overrides?: CallOverrides): Promise<BigNumber>;

    "lockupBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    minerReward(overrides?: CallOverrides): Promise<string>;

    "minerReward()"(overrides?: CallOverrides): Promise<string>;

    pendingTokens(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingTokens(address,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    "periodBlocks()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "rewardToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Claim(to: string | null, value: null): EventFilter;

    Lock(to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    calLockAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calLockAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocks(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLocks(address,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _token: string,
      _lockupBps: BigNumberish,
      _periodBlocks: BigNumberish,
      _minerRewardAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint256,uint256,address)"(
      _token: string,
      _lockupBps: BigNumberish,
      _periodBlocks: BigNumberish,
      _minerRewardAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lock(
      _user: string,
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "lock(address,uint256,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lockOf(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockOf(address,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "locks(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockupBps(overrides?: CallOverrides): Promise<BigNumber>;

    "lockupBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    minerReward(overrides?: CallOverrides): Promise<BigNumber>;

    "minerReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingTokens(address,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    "periodBlocks()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calLockAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calLockAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLocks(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLocks(address,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _lockupBps: BigNumberish,
      _periodBlocks: BigNumberish,
      _minerRewardAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint256,uint256,address)"(
      _token: string,
      _lockupBps: BigNumberish,
      _periodBlocks: BigNumberish,
      _minerRewardAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lock(
      _user: string,
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lock(address,uint256,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lockOf(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockOf(address,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locks(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockupBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockupBps()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minerReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minerReward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingTokens(address,uint256)"(
      _user: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodBlocks()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
