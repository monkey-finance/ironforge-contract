/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface QuarterlyContractOracleInterface extends ethers.utils.Interface {
  functions: {
    "__AdminUpgradeable_init(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "becomeAdmin()": FunctionFragment;
    "candidate()": FunctionFragment;
    "getQuarterlyContractPrice(bytes32)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isFrozen(bytes32)": FunctionFragment;
    "isOracleServerRole(address)": FunctionFragment;
    "prices(bytes32)": FunctionFragment;
    "setCandidate(address)": FunctionFragment;
    "setFrozen(bytes32,bool)": FunctionFragment;
    "setQuarterlyContractPrice(bytes32,uint256,uint256)": FunctionFragment;
    "updateAddressCache(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__AdminUpgradeable_init",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "becomeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getQuarterlyContractPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "isFrozen", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isOracleServerRole",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "prices", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setCandidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFrozen",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuarterlyContractPrice",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAddressCache",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "__AdminUpgradeable_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "becomeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuarterlyContractPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOracleServerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setQuarterlyContractPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAddressCache",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "CachedAddressUpdated(bytes32,address)": EventFragment;
    "CandidateChanged(address,address)": EventFragment;
    "PriceUpdated(bytes32,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CachedAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CandidateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
}

export class QuarterlyContractOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: QuarterlyContractOracleInterface;

  functions: {
    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    "admin()"(overrides?: CallOverrides): Promise<[string]>;

    becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    getQuarterlyContractPrice(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, boolean] & {
          price: BigNumber;
          updateTime: BigNumber;
          frozen: boolean;
        }
      ]
    >;

    "getQuarterlyContractPrice(bytes32)"(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, boolean] & {
          price: BigNumber;
          updateTime: BigNumber;
          frozen: boolean;
        }
      ]
    >;

    initialize(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOracleServerRole(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOracleServerRole(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    prices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        price: BigNumber;
        updateTime: BigNumber;
        frozen: boolean;
      }
    >;

    "prices(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        price: BigNumber;
        updateTime: BigNumber;
        frozen: boolean;
      }
    >;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFrozen(
      currencyKey: BytesLike,
      isFrozen: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFrozen(bytes32,bool)"(
      currencyKey: BytesLike,
      isFrozen: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setQuarterlyContractPrice(
      symbol: BytesLike,
      price: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setQuarterlyContractPrice(bytes32,uint256,uint256)"(
      symbol: BytesLike,
      price: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  __AdminUpgradeable_init(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__AdminUpgradeable_init(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  getQuarterlyContractPrice(
    symbol: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      price: BigNumber;
      updateTime: BigNumber;
      frozen: boolean;
    }
  >;

  "getQuarterlyContractPrice(bytes32)"(
    symbol: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      price: BigNumber;
      updateTime: BigNumber;
      frozen: boolean;
    }
  >;

  initialize(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isFrozen(currencyKey: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "isFrozen(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOracleServerRole(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOracleServerRole(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  prices(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      price: BigNumber;
      updateTime: BigNumber;
      frozen: boolean;
    }
  >;

  "prices(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      price: BigNumber;
      updateTime: BigNumber;
      frozen: boolean;
    }
  >;

  setCandidate(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCandidate(address)"(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFrozen(
    currencyKey: BytesLike,
    isFrozen: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFrozen(bytes32,bool)"(
    currencyKey: BytesLike,
    isFrozen: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setQuarterlyContractPrice(
    symbol: BytesLike,
    price: BigNumberish,
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setQuarterlyContractPrice(bytes32,uint256,uint256)"(
    symbol: BytesLike,
    price: BigNumberish,
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAddressCache(
    _addressStorage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAddressCache(address)"(
    _addressStorage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    __AdminUpgradeable_init(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    becomeAdmin(overrides?: CallOverrides): Promise<void>;

    "becomeAdmin()"(overrides?: CallOverrides): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    getQuarterlyContractPrice(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        price: BigNumber;
        updateTime: BigNumber;
        frozen: boolean;
      }
    >;

    "getQuarterlyContractPrice(bytes32)"(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        price: BigNumber;
        updateTime: BigNumber;
        frozen: boolean;
      }
    >;

    initialize(_admin: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOracleServerRole(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOracleServerRole(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    prices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        price: BigNumber;
        updateTime: BigNumber;
        frozen: boolean;
      }
    >;

    "prices(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        price: BigNumber;
        updateTime: BigNumber;
        frozen: boolean;
      }
    >;

    setCandidate(_candidate: string, overrides?: CallOverrides): Promise<void>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFrozen(
      currencyKey: BytesLike,
      isFrozen: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFrozen(bytes32,bool)"(
      currencyKey: BytesLike,
      isFrozen: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuarterlyContractPrice(
      symbol: BytesLike,
      price: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setQuarterlyContractPrice(bytes32,uint256,uint256)"(
      symbol: BytesLike,
      price: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminChanged(oldAdmin: null, newAdmin: null): EventFilter;

    CachedAddressUpdated(name: null, addr: null): EventFilter;

    CandidateChanged(oldCandidate: null, newCandidate: null): EventFilter;

    PriceUpdated(symbol: null, price: null, time: null): EventFilter;
  };

  estimateGas: {
    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    becomeAdmin(overrides?: Overrides): Promise<BigNumber>;

    "becomeAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getQuarterlyContractPrice(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuarterlyContractPrice(bytes32)"(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(_admin: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOracleServerRole(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOracleServerRole(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prices(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "prices(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCandidate(_candidate: string, overrides?: Overrides): Promise<BigNumber>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFrozen(
      currencyKey: BytesLike,
      isFrozen: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFrozen(bytes32,bool)"(
      currencyKey: BytesLike,
      isFrozen: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setQuarterlyContractPrice(
      symbol: BytesLike,
      price: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setQuarterlyContractPrice(bytes32,uint256,uint256)"(
      symbol: BytesLike,
      price: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    becomeAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQuarterlyContractPrice(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getQuarterlyContractPrice(bytes32)"(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOracleServerRole(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOracleServerRole(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prices(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFrozen(
      currencyKey: BytesLike,
      isFrozen: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFrozen(bytes32,bool)"(
      currencyKey: BytesLike,
      isFrozen: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setQuarterlyContractPrice(
      symbol: BytesLike,
      price: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setQuarterlyContractPrice(bytes32,uint256,uint256)"(
      symbol: BytesLike,
      price: BigNumberish,
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
