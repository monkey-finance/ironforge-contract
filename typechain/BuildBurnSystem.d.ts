/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BuildBurnSystemInterface extends ethers.utils.Interface {
  functions: {
    "MaxCanBuildAsset(address,bytes32,uint256)": FunctionFragment;
    "SetLusdTokenAddress(address)": FunctionFragment;
    "__AdminUpgradeable_init(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "becomeAdmin()": FunctionFragment;
    "buildFromCollateralSys(address,uint256,bytes32,address)": FunctionFragment;
    "burnForLiquidation(address,uint256,bytes32)": FunctionFragment;
    "burnFromCollateralSys(address,uint256,bytes32)": FunctionFragment;
    "candidate()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "paused()": FunctionFragment;
    "setCandidate(address)": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "updateAddressCache(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MaxCanBuildAsset",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SetLusdTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "__AdminUpgradeable_init",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "becomeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buildFromCollateralSys",
    values: [string, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "burnForLiquidation",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFromCollateralSys",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCandidate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "updateAddressCache",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MaxCanBuildAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetLusdTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__AdminUpgradeable_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "becomeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildFromCollateralSys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnFromCollateralSys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAddressCache",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "CachedAddressUpdated(bytes32,address)": EventFragment;
    "CandidateChanged(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdateLusdToken(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CachedAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CandidateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLusdToken"): EventFragment;
}

export class BuildBurnSystem extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BuildBurnSystemInterface;

  functions: {
    MaxCanBuildAsset(
      user: string,
      _currency: BytesLike,
      buildRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "MaxCanBuildAsset(address,bytes32,uint256)"(
      user: string,
      _currency: BytesLike,
      buildRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    SetLusdTokenAddress(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SetLusdTokenAddress(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    "admin()"(overrides?: CallOverrides): Promise<[string]>;

    becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

    buildFromCollateralSys(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buildFromCollateralSys(address,uint256,bytes32,address)"(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnForLiquidation(
      user: string,
      amount: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnForLiquidation(address,uint256,bytes32)"(
      user: string,
      amount: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnFromCollateralSys(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnFromCollateralSys(address,uint256,bytes32)"(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      admin: string,
      _FUSDTokenAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      admin: string,
      _FUSDTokenAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPaused(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPaused(bool)"(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MaxCanBuildAsset(
    user: string,
    _currency: BytesLike,
    buildRatio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "MaxCanBuildAsset(address,bytes32,uint256)"(
    user: string,
    _currency: BytesLike,
    buildRatio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  SetLusdTokenAddress(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SetLusdTokenAddress(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  __AdminUpgradeable_init(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__AdminUpgradeable_init(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  buildFromCollateralSys(
    user: string,
    amount: BigNumberish,
    currency: BytesLike,
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buildFromCollateralSys(address,uint256,bytes32,address)"(
    user: string,
    amount: BigNumberish,
    currency: BytesLike,
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnForLiquidation(
    user: string,
    amount: BigNumberish,
    _currency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnForLiquidation(address,uint256,bytes32)"(
    user: string,
    amount: BigNumberish,
    _currency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnFromCollateralSys(
    user: string,
    amount: BigNumberish,
    currency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnFromCollateralSys(address,uint256,bytes32)"(
    user: string,
    amount: BigNumberish,
    currency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    admin: string,
    _FUSDTokenAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    admin: string,
    _FUSDTokenAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  setCandidate(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCandidate(address)"(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPaused(
    _paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPaused(bool)"(
    _paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAddressCache(
    _addressStorage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAddressCache(address)"(
    _addressStorage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MaxCanBuildAsset(
      user: string,
      _currency: BytesLike,
      buildRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MaxCanBuildAsset(address,bytes32,uint256)"(
      user: string,
      _currency: BytesLike,
      buildRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SetLusdTokenAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "SetLusdTokenAddress(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    becomeAdmin(overrides?: CallOverrides): Promise<void>;

    "becomeAdmin()"(overrides?: CallOverrides): Promise<void>;

    buildFromCollateralSys(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "buildFromCollateralSys(address,uint256,bytes32,address)"(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    burnForLiquidation(
      user: string,
      amount: BigNumberish,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnForLiquidation(address,uint256,bytes32)"(
      user: string,
      amount: BigNumberish,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    burnFromCollateralSys(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnFromCollateralSys(address,uint256,bytes32)"(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      admin: string,
      _FUSDTokenAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      admin: string,
      _FUSDTokenAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    setCandidate(_candidate: string, overrides?: CallOverrides): Promise<void>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    "setPaused(bool)"(
      _paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminChanged(oldAdmin: null, newAdmin: null): EventFilter;

    CachedAddressUpdated(name: null, addr: null): EventFilter;

    CandidateChanged(oldCandidate: null, newCandidate: null): EventFilter;

    Paused(account: null): EventFilter;

    Unpaused(account: null): EventFilter;

    UpdateLusdToken(oldAddr: null, newAddr: null): EventFilter;
  };

  estimateGas: {
    MaxCanBuildAsset(
      user: string,
      _currency: BytesLike,
      buildRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MaxCanBuildAsset(address,bytes32,uint256)"(
      user: string,
      _currency: BytesLike,
      buildRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SetLusdTokenAddress(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SetLusdTokenAddress(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    becomeAdmin(overrides?: Overrides): Promise<BigNumber>;

    "becomeAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    buildFromCollateralSys(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buildFromCollateralSys(address,uint256,bytes32,address)"(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnForLiquidation(
      user: string,
      amount: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnForLiquidation(address,uint256,bytes32)"(
      user: string,
      amount: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnFromCollateralSys(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnFromCollateralSys(address,uint256,bytes32)"(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      admin: string,
      _FUSDTokenAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      admin: string,
      _FUSDTokenAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCandidate(_candidate: string, overrides?: Overrides): Promise<BigNumber>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPaused(_paused: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setPaused(bool)"(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MaxCanBuildAsset(
      user: string,
      _currency: BytesLike,
      buildRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MaxCanBuildAsset(address,bytes32,uint256)"(
      user: string,
      _currency: BytesLike,
      buildRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SetLusdTokenAddress(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SetLusdTokenAddress(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    becomeAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    buildFromCollateralSys(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buildFromCollateralSys(address,uint256,bytes32,address)"(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnForLiquidation(
      user: string,
      amount: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnForLiquidation(address,uint256,bytes32)"(
      user: string,
      amount: BigNumberish,
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnFromCollateralSys(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnFromCollateralSys(address,uint256,bytes32)"(
      user: string,
      amount: BigNumberish,
      currency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      admin: string,
      _FUSDTokenAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      admin: string,
      _FUSDTokenAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPaused(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPaused(bool)"(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
