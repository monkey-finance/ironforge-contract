/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IDexOracleInterface extends ethers.utils.Interface {
  functions: {
    "consult(address,uint256)": FunctionFragment;
    "getPrice()": FunctionFragment;
    "periodElapsed()": FunctionFragment;
    "update()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "consult",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodElapsed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "update", values?: undefined): string;

  decodeFunctionResult(functionFragment: "consult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodElapsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {};
}

export class IDexOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IDexOracleInterface;

  functions: {
    consult(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; updatedTime: BigNumber }
    >;

    "consult(address,uint256)"(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; updatedTime: BigNumber }
    >;

    getPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; updatedTime: BigNumber }
    >;

    "getPrice()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; updatedTime: BigNumber }
    >;

    periodElapsed(overrides?: CallOverrides): Promise<[boolean]>;

    "periodElapsed()"(overrides?: CallOverrides): Promise<[boolean]>;

    update(overrides?: Overrides): Promise<ContractTransaction>;

    "update()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  consult(
    token: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountOut: BigNumber; updatedTime: BigNumber }
  >;

  "consult(address,uint256)"(
    token: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountOut: BigNumber; updatedTime: BigNumber }
  >;

  getPrice(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { price: BigNumber; updatedTime: BigNumber }
  >;

  "getPrice()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { price: BigNumber; updatedTime: BigNumber }
  >;

  periodElapsed(overrides?: CallOverrides): Promise<boolean>;

  "periodElapsed()"(overrides?: CallOverrides): Promise<boolean>;

  update(overrides?: Overrides): Promise<ContractTransaction>;

  "update()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    consult(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; updatedTime: BigNumber }
    >;

    "consult(address,uint256)"(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; updatedTime: BigNumber }
    >;

    getPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; updatedTime: BigNumber }
    >;

    "getPrice()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; updatedTime: BigNumber }
    >;

    periodElapsed(overrides?: CallOverrides): Promise<boolean>;

    "periodElapsed()"(overrides?: CallOverrides): Promise<boolean>;

    update(overrides?: CallOverrides): Promise<void>;

    "update()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    consult(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "consult(address,uint256)"(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodElapsed(overrides?: CallOverrides): Promise<BigNumber>;

    "periodElapsed()"(overrides?: CallOverrides): Promise<BigNumber>;

    update(overrides?: Overrides): Promise<BigNumber>;

    "update()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    consult(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "consult(address,uint256)"(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodElapsed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodElapsed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    update(overrides?: Overrides): Promise<PopulatedTransaction>;

    "update()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
