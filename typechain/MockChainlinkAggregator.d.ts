/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MockChainlinkAggregatorInterface extends ethers.utils.Interface {
  functions: {
    "_answer()": FunctionFragment;
    "_answeredInRound()": FunctionFragment;
    "_decimals()": FunctionFragment;
    "_roundId()": FunctionFragment;
    "_startedAt()": FunctionFragment;
    "_updatedAt()": FunctionFragment;
    "decimals()": FunctionFragment;
    "latestRoundData()": FunctionFragment;
    "setDecimals(uint8)": FunctionFragment;
    "setLatestRoundData(uint80,int256,uint256,uint256,uint80)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_answer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_answeredInRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "_roundId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_startedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_updatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDecimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestRoundData",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "_answer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_answeredInRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_roundId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_startedAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_updatedAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestRoundData",
    data: BytesLike
  ): Result;

  events: {};
}

export class MockChainlinkAggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockChainlinkAggregatorInterface;

  functions: {
    _answer(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_answer()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _answeredInRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_answeredInRound()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _decimals(overrides?: CallOverrides): Promise<[number]>;

    "_decimals()"(overrides?: CallOverrides): Promise<[number]>;

    _roundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_roundId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _startedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_startedAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _updatedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_updatedAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    "latestRoundData()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    setDecimals(
      newDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDecimals(uint8)"(
      newDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLatestRoundData(
      newRoundId: BigNumberish,
      newAnswer: BigNumberish,
      newStartedAt: BigNumberish,
      newUpdatedAt: BigNumberish,
      newAnsweredInRound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLatestRoundData(uint80,int256,uint256,uint256,uint80)"(
      newRoundId: BigNumberish,
      newAnswer: BigNumberish,
      newStartedAt: BigNumberish,
      newUpdatedAt: BigNumberish,
      newAnsweredInRound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  _answer(overrides?: CallOverrides): Promise<BigNumber>;

  "_answer()"(overrides?: CallOverrides): Promise<BigNumber>;

  _answeredInRound(overrides?: CallOverrides): Promise<BigNumber>;

  "_answeredInRound()"(overrides?: CallOverrides): Promise<BigNumber>;

  _decimals(overrides?: CallOverrides): Promise<number>;

  "_decimals()"(overrides?: CallOverrides): Promise<number>;

  _roundId(overrides?: CallOverrides): Promise<BigNumber>;

  "_roundId()"(overrides?: CallOverrides): Promise<BigNumber>;

  _startedAt(overrides?: CallOverrides): Promise<BigNumber>;

  "_startedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  _updatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  "_updatedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  latestRoundData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  "latestRoundData()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  setDecimals(
    newDecimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDecimals(uint8)"(
    newDecimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLatestRoundData(
    newRoundId: BigNumberish,
    newAnswer: BigNumberish,
    newStartedAt: BigNumberish,
    newUpdatedAt: BigNumberish,
    newAnsweredInRound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLatestRoundData(uint80,int256,uint256,uint256,uint80)"(
    newRoundId: BigNumberish,
    newAnswer: BigNumberish,
    newStartedAt: BigNumberish,
    newUpdatedAt: BigNumberish,
    newAnsweredInRound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    _answer(overrides?: CallOverrides): Promise<BigNumber>;

    "_answer()"(overrides?: CallOverrides): Promise<BigNumber>;

    _answeredInRound(overrides?: CallOverrides): Promise<BigNumber>;

    "_answeredInRound()"(overrides?: CallOverrides): Promise<BigNumber>;

    _decimals(overrides?: CallOverrides): Promise<number>;

    "_decimals()"(overrides?: CallOverrides): Promise<number>;

    _roundId(overrides?: CallOverrides): Promise<BigNumber>;

    "_roundId()"(overrides?: CallOverrides): Promise<BigNumber>;

    _startedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "_startedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    _updatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "_updatedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    "latestRoundData()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    setDecimals(
      newDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDecimals(uint8)"(
      newDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLatestRoundData(
      newRoundId: BigNumberish,
      newAnswer: BigNumberish,
      newStartedAt: BigNumberish,
      newUpdatedAt: BigNumberish,
      newAnsweredInRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLatestRoundData(uint80,int256,uint256,uint256,uint80)"(
      newRoundId: BigNumberish,
      newAnswer: BigNumberish,
      newStartedAt: BigNumberish,
      newUpdatedAt: BigNumberish,
      newAnsweredInRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _answer(overrides?: CallOverrides): Promise<BigNumber>;

    "_answer()"(overrides?: CallOverrides): Promise<BigNumber>;

    _answeredInRound(overrides?: CallOverrides): Promise<BigNumber>;

    "_answeredInRound()"(overrides?: CallOverrides): Promise<BigNumber>;

    _decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "_decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    _roundId(overrides?: CallOverrides): Promise<BigNumber>;

    "_roundId()"(overrides?: CallOverrides): Promise<BigNumber>;

    _startedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "_startedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    _updatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "_updatedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

    "latestRoundData()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDecimals(
      newDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDecimals(uint8)"(
      newDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLatestRoundData(
      newRoundId: BigNumberish,
      newAnswer: BigNumberish,
      newStartedAt: BigNumberish,
      newUpdatedAt: BigNumberish,
      newAnsweredInRound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLatestRoundData(uint80,int256,uint256,uint256,uint80)"(
      newRoundId: BigNumberish,
      newAnswer: BigNumberish,
      newStartedAt: BigNumberish,
      newUpdatedAt: BigNumberish,
      newAnsweredInRound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _answer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_answer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _answeredInRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_answeredInRound()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _roundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_roundId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _startedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_startedAt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _updatedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_updatedAt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "latestRoundData()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDecimals(
      newDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDecimals(uint8)"(
      newDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLatestRoundData(
      newRoundId: BigNumberish,
      newAnswer: BigNumberish,
      newStartedAt: BigNumberish,
      newUpdatedAt: BigNumberish,
      newAnsweredInRound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLatestRoundData(uint80,int256,uint256,uint256,uint80)"(
      newRoundId: BigNumberish,
      newAnswer: BigNumberish,
      newStartedAt: BigNumberish,
      newUpdatedAt: BigNumberish,
      newAnsweredInRound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
