/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RewardSystemInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "PERIOD_LENGTH()": FunctionFragment;
    "REWARD_TYPEHASH()": FunctionFragment;
    "__AdminUpgradeable_init(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "becomeAdmin()": FunctionFragment;
    "candidate()": FunctionFragment;
    "claimReward(uint256,uint256,bytes)": FunctionFragment;
    "claimRewardFor(uint256,address,uint256,bytes)": FunctionFragment;
    "collateralSystem()": FunctionFragment;
    "firstPeriodStartTime()": FunctionFragment;
    "fusd()": FunctionFragment;
    "getCurrentPeriodId()": FunctionFragment;
    "getPeriodEndTime(uint256)": FunctionFragment;
    "getPeriodStartTime(uint256)": FunctionFragment;
    "initialize(uint256,address,address,address,address)": FunctionFragment;
    "rewardSigner()": FunctionFragment;
    "setCandidate(address)": FunctionFragment;
    "setRewardSigner(address)": FunctionFragment;
    "userLastClaimPeriodIds(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERIOD_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__AdminUpgradeable_init",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "becomeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardFor",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralSystem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstPeriodStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fusd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentPeriodId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCandidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userLastClaimPeriodIds",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERIOD_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__AdminUpgradeable_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "becomeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstPeriodStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fusd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPeriodId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLastClaimPeriodIds",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "CandidateChanged(address,address)": EventFragment;
    "RewardClaimed(address,uint256,uint256)": EventFragment;
    "RewardSignerChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CandidateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardSignerChanged"): EventFragment;
}

export class RewardSystem extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RewardSystemInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    PERIOD_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PERIOD_LENGTH()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "REWARD_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    "admin()"(overrides?: CallOverrides): Promise<[string]>;

    becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    claimReward(
      periodId: BigNumberish,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimReward(uint256,uint256,bytes)"(
      periodId: BigNumberish,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimRewardFor(
      periodId: BigNumberish,
      recipient: string,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimRewardFor(uint256,address,uint256,bytes)"(
      periodId: BigNumberish,
      recipient: string,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collateralSystem(overrides?: CallOverrides): Promise<[string]>;

    "collateralSystem()"(overrides?: CallOverrides): Promise<[string]>;

    firstPeriodStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "firstPeriodStartTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fusd(overrides?: CallOverrides): Promise<[string]>;

    "fusd()"(overrides?: CallOverrides): Promise<[string]>;

    getCurrentPeriodId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentPeriodId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPeriodEndTime(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPeriodEndTime(uint256)"(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPeriodStartTime(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPeriodStartTime(uint256)"(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _firstPeriodStartTime: BigNumberish,
      _rewardSigner: string,
      _fusdAddress: string,
      _collateralSystemAddress: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint256,address,address,address,address)"(
      _firstPeriodStartTime: BigNumberish,
      _rewardSigner: string,
      _fusdAddress: string,
      _collateralSystemAddress: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardSigner(overrides?: CallOverrides): Promise<[string]>;

    "rewardSigner()"(overrides?: CallOverrides): Promise<[string]>;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewardSigner(
      _rewardSigner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewardSigner(address)"(
      _rewardSigner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userLastClaimPeriodIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userLastClaimPeriodIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  PERIOD_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  "PERIOD_LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "REWARD_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  __AdminUpgradeable_init(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__AdminUpgradeable_init(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  claimReward(
    periodId: BigNumberish,
    feeReward: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimReward(uint256,uint256,bytes)"(
    periodId: BigNumberish,
    feeReward: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimRewardFor(
    periodId: BigNumberish,
    recipient: string,
    feeReward: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimRewardFor(uint256,address,uint256,bytes)"(
    periodId: BigNumberish,
    recipient: string,
    feeReward: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collateralSystem(overrides?: CallOverrides): Promise<string>;

  "collateralSystem()"(overrides?: CallOverrides): Promise<string>;

  firstPeriodStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "firstPeriodStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  fusd(overrides?: CallOverrides): Promise<string>;

  "fusd()"(overrides?: CallOverrides): Promise<string>;

  getCurrentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentPeriodId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPeriodEndTime(
    periodId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPeriodEndTime(uint256)"(
    periodId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPeriodStartTime(
    periodId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPeriodStartTime(uint256)"(
    periodId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _firstPeriodStartTime: BigNumberish,
    _rewardSigner: string,
    _fusdAddress: string,
    _collateralSystemAddress: string,
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint256,address,address,address,address)"(
    _firstPeriodStartTime: BigNumberish,
    _rewardSigner: string,
    _fusdAddress: string,
    _collateralSystemAddress: string,
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardSigner(overrides?: CallOverrides): Promise<string>;

  "rewardSigner()"(overrides?: CallOverrides): Promise<string>;

  setCandidate(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCandidate(address)"(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewardSigner(
    _rewardSigner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewardSigner(address)"(
    _rewardSigner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userLastClaimPeriodIds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userLastClaimPeriodIds(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    PERIOD_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERIOD_LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "REWARD_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    becomeAdmin(overrides?: CallOverrides): Promise<void>;

    "becomeAdmin()"(overrides?: CallOverrides): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    claimReward(
      periodId: BigNumberish,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimReward(uint256,uint256,bytes)"(
      periodId: BigNumberish,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewardFor(
      periodId: BigNumberish,
      recipient: string,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimRewardFor(uint256,address,uint256,bytes)"(
      periodId: BigNumberish,
      recipient: string,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralSystem(overrides?: CallOverrides): Promise<string>;

    "collateralSystem()"(overrides?: CallOverrides): Promise<string>;

    firstPeriodStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriodStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    fusd(overrides?: CallOverrides): Promise<string>;

    "fusd()"(overrides?: CallOverrides): Promise<string>;

    getCurrentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPeriodId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPeriodEndTime(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPeriodEndTime(uint256)"(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodStartTime(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPeriodStartTime(uint256)"(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _firstPeriodStartTime: BigNumberish,
      _rewardSigner: string,
      _fusdAddress: string,
      _collateralSystemAddress: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,address,address,address,address)"(
      _firstPeriodStartTime: BigNumberish,
      _rewardSigner: string,
      _fusdAddress: string,
      _collateralSystemAddress: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardSigner(overrides?: CallOverrides): Promise<string>;

    "rewardSigner()"(overrides?: CallOverrides): Promise<string>;

    setCandidate(_candidate: string, overrides?: CallOverrides): Promise<void>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardSigner(
      _rewardSigner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardSigner(address)"(
      _rewardSigner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userLastClaimPeriodIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userLastClaimPeriodIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AdminChanged(oldAdmin: null, newAdmin: null): EventFilter;

    CandidateChanged(oldCandidate: null, newCandidate: null): EventFilter;

    RewardClaimed(
      recipient: null,
      periodId: null,
      feeReward: null
    ): EventFilter;

    RewardSignerChanged(oldSigner: null, newSigner: null): EventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERIOD_LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "REWARD_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    becomeAdmin(overrides?: Overrides): Promise<BigNumber>;

    "becomeAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      periodId: BigNumberish,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimReward(uint256,uint256,bytes)"(
      periodId: BigNumberish,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimRewardFor(
      periodId: BigNumberish,
      recipient: string,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimRewardFor(uint256,address,uint256,bytes)"(
      periodId: BigNumberish,
      recipient: string,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collateralSystem(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralSystem()"(overrides?: CallOverrides): Promise<BigNumber>;

    firstPeriodStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriodStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    fusd(overrides?: CallOverrides): Promise<BigNumber>;

    "fusd()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPeriodId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPeriodEndTime(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPeriodEndTime(uint256)"(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodStartTime(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPeriodStartTime(uint256)"(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _firstPeriodStartTime: BigNumberish,
      _rewardSigner: string,
      _fusdAddress: string,
      _collateralSystemAddress: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint256,address,address,address,address)"(
      _firstPeriodStartTime: BigNumberish,
      _rewardSigner: string,
      _fusdAddress: string,
      _collateralSystemAddress: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardSigner(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardSigner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCandidate(_candidate: string, overrides?: Overrides): Promise<BigNumber>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewardSigner(
      _rewardSigner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewardSigner(address)"(
      _rewardSigner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userLastClaimPeriodIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userLastClaimPeriodIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERIOD_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERIOD_LENGTH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "REWARD_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    becomeAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      periodId: BigNumberish,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimReward(uint256,uint256,bytes)"(
      periodId: BigNumberish,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimRewardFor(
      periodId: BigNumberish,
      recipient: string,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimRewardFor(uint256,address,uint256,bytes)"(
      periodId: BigNumberish,
      recipient: string,
      feeReward: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collateralSystem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralSystem()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstPeriodStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "firstPeriodStartTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fusd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fusd()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPeriodId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentPeriodId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodEndTime(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPeriodEndTime(uint256)"(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodStartTime(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPeriodStartTime(uint256)"(
      periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _firstPeriodStartTime: BigNumberish,
      _rewardSigner: string,
      _fusdAddress: string,
      _collateralSystemAddress: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,address,address,address,address)"(
      _firstPeriodStartTime: BigNumberish,
      _rewardSigner: string,
      _fusdAddress: string,
      _collateralSystemAddress: string,
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardSigner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewardSigner(
      _rewardSigner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewardSigner(address)"(
      _rewardSigner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userLastClaimPeriodIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userLastClaimPeriodIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
