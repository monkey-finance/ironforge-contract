/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMinerRewardInterface extends ethers.utils.Interface {
  functions: {
    "deposit(address,uint256,uint256)": FunctionFragment;
    "getCurrentPeriodId()": FunctionFragment;
    "getStakeToken(uint256)": FunctionFragment;
    "harvest(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "sendExchangeReward(address,uint256)": FunctionFragment;
    "setExchangeRewardInfo(uint256,uint256,uint256)": FunctionFragment;
    "withdraw(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPeriodId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendExchangeReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeRewardInfo",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPeriodId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendExchangeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IMinerReward extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMinerRewardInterface;

  functions: {
    deposit(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCurrentPeriodId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentPeriodId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakeToken(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getStakeToken(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    harvest(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendExchangeReward(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendExchangeReward(address,uint256)"(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setExchangeRewardInfo(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setExchangeRewardInfo(uint256,uint256,uint256)"(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  deposit(
    _for: string,
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,uint256)"(
    _for: string,
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCurrentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentPeriodId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getStakeToken(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getStakeToken(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  harvest(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvest(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  sendExchangeReward(
    _recipient: string,
    exchangeAmountInUSD: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendExchangeReward(address,uint256)"(
    _recipient: string,
    exchangeAmountInUSD: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setExchangeRewardInfo(
    _periodId: BigNumberish,
    _rate: BigNumberish,
    _totalReward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setExchangeRewardInfo(uint256,uint256,uint256)"(
    _periodId: BigNumberish,
    _rate: BigNumberish,
    _totalReward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    _for: string,
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,uint256)"(
    _for: string,
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPeriodId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeToken(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getStakeToken(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    harvest(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    sendExchangeReward(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendExchangeReward(address,uint256)"(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangeRewardInfo(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExchangeRewardInfo(uint256,uint256,uint256)"(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deposit(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCurrentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPeriodId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeToken(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getStakeToken(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    harvest(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    sendExchangeReward(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendExchangeReward(address,uint256)"(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setExchangeRewardInfo(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setExchangeRewardInfo(uint256,uint256,uint256)"(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCurrentPeriodId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentPeriodId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeToken(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getStakeToken(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    harvest(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendExchangeReward(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendExchangeReward(address,uint256)"(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setExchangeRewardInfo(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setExchangeRewardInfo(uint256,uint256,uint256)"(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
