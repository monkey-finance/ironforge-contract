/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ExchangeSystemInterface extends ethers.utils.Interface {
  functions: {
    "__AdminUpgradeable_init(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "becomeAdmin()": FunctionFragment;
    "canOnlyBeReverted(uint256)": FunctionFragment;
    "candidate()": FunctionFragment;
    "deviationSatisfied(uint256)": FunctionFragment;
    "exchange(bytes32,uint256,address,bytes32)": FunctionFragment;
    "exchangeFromCollateral(bytes32,uint256,address,bytes32,bytes32,uint256)": FunctionFragment;
    "exitPositionOnly()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "lastPendingExchangeEntryId()": FunctionFragment;
    "pendingExchangeEntries(uint256)": FunctionFragment;
    "pendingMintOrBurnEntries(uint256)": FunctionFragment;
    "rollback(uint256)": FunctionFragment;
    "setCandidate(address)": FunctionFragment;
    "setExitPositionOnly(bool)": FunctionFragment;
    "setFoundationFeeHolder(address)": FunctionFragment;
    "settle(uint256)": FunctionFragment;
    "settlementDelayPassed(uint256)": FunctionFragment;
    "updateAddressCache(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__AdminUpgradeable_init",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "becomeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canOnlyBeReverted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deviationSatisfied",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BytesLike, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFromCollateral",
    values: [
      BytesLike,
      BigNumberish,
      string,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPositionOnly",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastPendingExchangeEntryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingExchangeEntries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingMintOrBurnEntries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rollback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCandidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitPositionOnly",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFoundationFeeHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementDelayPassed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAddressCache",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "__AdminUpgradeable_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "becomeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canOnlyBeReverted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deviationSatisfied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFromCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPositionOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastPendingExchangeEntryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingExchangeEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingMintOrBurnEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExitPositionOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFoundationFeeHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settlementDelayPassed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAddressCache",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "CachedAddressUpdated(bytes32,address)": EventFragment;
    "CandidateChanged(address,address)": EventFragment;
    "ExchangeAsset(address,bytes32,uint256,address,bytes32,uint256,uint256,uint256)": EventFragment;
    "ExitPositionOnlyChanged(bool,bool)": EventFragment;
    "FoundationFeeHolderChanged(address,address)": EventFragment;
    "PendingExchangeAdded(uint256,address,address,uint256,bytes32,bytes32,uint256)": EventFragment;
    "PendingExchangeReverted(uint256)": EventFragment;
    "PendingExchangeSettled(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "PendingMintOrBurnSettled(uint256,address,bytes32,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CachedAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CandidateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitPositionOnlyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FoundationFeeHolderChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingExchangeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingExchangeReverted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingExchangeSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingMintOrBurnSettled"): EventFragment;
}

export class ExchangeSystem extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ExchangeSystemInterface;

  functions: {
    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    "admin()"(overrides?: CallOverrides): Promise<[string]>;

    becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

    canOnlyBeReverted(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canOnlyBeReverted(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    deviationSatisfied(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { satisfied: boolean; destAmount: BigNumber }
    >;

    "deviationSatisfied(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { satisfied: boolean; destAmount: BigNumber }
    >;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exchange(bytes32,uint256,address,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exchangeFromCollateral(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exchangeFromCollateral(bytes32,uint256,address,bytes32,bytes32,uint256)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitPositionOnly(overrides?: CallOverrides): Promise<[boolean]>;

    "exitPositionOnly()"(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastPendingExchangeEntryId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastPendingExchangeEntryId()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingExchangeEntries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber
      ] & {
        id: BigNumber;
        timestamp: BigNumber;
        fromAddress: string;
        destAddress: string;
        fromAmount: BigNumber;
        fromCurrency: string;
        toCurrency: string;
        pendingDestAmount: BigNumber;
      }
    >;

    "pendingExchangeEntries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber
      ] & {
        id: BigNumber;
        timestamp: BigNumber;
        fromAddress: string;
        destAddress: string;
        fromAmount: BigNumber;
        fromCurrency: string;
        toCurrency: string;
        pendingDestAmount: BigNumber;
      }
    >;

    pendingMintOrBurnEntries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string] & {
        id: BigNumber;
        user: string;
        stakeCurrency: string;
        stakeAmount: BigNumber;
        entryType: string;
      }
    >;

    "pendingMintOrBurnEntries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string] & {
        id: BigNumber;
        user: string;
        stakeCurrency: string;
        stakeAmount: BigNumber;
        entryType: string;
      }
    >;

    rollback(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rollback(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setExitPositionOnly(
      newValue: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setExitPositionOnly(bool)"(
      newValue: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFoundationFeeHolder(
      _foundationFeeHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFoundationFeeHolder(address)"(
      _foundationFeeHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settle(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settle(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settlementDelayPassed(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "settlementDelayPassed(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  __AdminUpgradeable_init(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__AdminUpgradeable_init(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  canOnlyBeReverted(
    pendingExchangeEntryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canOnlyBeReverted(uint256)"(
    pendingExchangeEntryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  deviationSatisfied(
    pendingExchangeEntryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { satisfied: boolean; destAmount: BigNumber }
  >;

  "deviationSatisfied(uint256)"(
    pendingExchangeEntryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { satisfied: boolean; destAmount: BigNumber }
  >;

  exchange(
    sourceKey: BytesLike,
    sourceAmount: BigNumberish,
    destAddress: string,
    destKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exchange(bytes32,uint256,address,bytes32)"(
    sourceKey: BytesLike,
    sourceAmount: BigNumberish,
    destAddress: string,
    destKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exchangeFromCollateral(
    sourceKey: BytesLike,
    sourceAmount: BigNumberish,
    destAddress: string,
    destKey: BytesLike,
    stakeCurrency: BytesLike,
    stakeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exchangeFromCollateral(bytes32,uint256,address,bytes32,bytes32,uint256)"(
    sourceKey: BytesLike,
    sourceAmount: BigNumberish,
    destAddress: string,
    destKey: BytesLike,
    stakeCurrency: BytesLike,
    stakeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitPositionOnly(overrides?: CallOverrides): Promise<boolean>;

  "exitPositionOnly()"(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastPendingExchangeEntryId(overrides?: CallOverrides): Promise<BigNumber>;

  "lastPendingExchangeEntryId()"(overrides?: CallOverrides): Promise<BigNumber>;

  pendingExchangeEntries(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      string,
      BigNumber
    ] & {
      id: BigNumber;
      timestamp: BigNumber;
      fromAddress: string;
      destAddress: string;
      fromAmount: BigNumber;
      fromCurrency: string;
      toCurrency: string;
      pendingDestAmount: BigNumber;
    }
  >;

  "pendingExchangeEntries(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      string,
      BigNumber
    ] & {
      id: BigNumber;
      timestamp: BigNumber;
      fromAddress: string;
      destAddress: string;
      fromAmount: BigNumber;
      fromCurrency: string;
      toCurrency: string;
      pendingDestAmount: BigNumber;
    }
  >;

  pendingMintOrBurnEntries(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, string] & {
      id: BigNumber;
      user: string;
      stakeCurrency: string;
      stakeAmount: BigNumber;
      entryType: string;
    }
  >;

  "pendingMintOrBurnEntries(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, string] & {
      id: BigNumber;
      user: string;
      stakeCurrency: string;
      stakeAmount: BigNumber;
      entryType: string;
    }
  >;

  rollback(
    pendingExchangeEntryId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rollback(uint256)"(
    pendingExchangeEntryId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCandidate(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCandidate(address)"(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setExitPositionOnly(
    newValue: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setExitPositionOnly(bool)"(
    newValue: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFoundationFeeHolder(
    _foundationFeeHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFoundationFeeHolder(address)"(
    _foundationFeeHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settle(
    pendingExchangeEntryId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settle(uint256)"(
    pendingExchangeEntryId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settlementDelayPassed(
    pendingExchangeEntryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "settlementDelayPassed(uint256)"(
    pendingExchangeEntryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateAddressCache(
    _addressStorage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAddressCache(address)"(
    _addressStorage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    __AdminUpgradeable_init(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    becomeAdmin(overrides?: CallOverrides): Promise<void>;

    "becomeAdmin()"(overrides?: CallOverrides): Promise<void>;

    canOnlyBeReverted(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canOnlyBeReverted(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    deviationSatisfied(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { satisfied: boolean; destAmount: BigNumber }
    >;

    "deviationSatisfied(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { satisfied: boolean; destAmount: BigNumber }
    >;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchange(bytes32,uint256,address,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeFromCollateral(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchangeFromCollateral(bytes32,uint256,address,bytes32,bytes32,uint256)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitPositionOnly(overrides?: CallOverrides): Promise<boolean>;

    "exitPositionOnly()"(overrides?: CallOverrides): Promise<boolean>;

    initialize(_admin: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastPendingExchangeEntryId(overrides?: CallOverrides): Promise<BigNumber>;

    "lastPendingExchangeEntryId()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingExchangeEntries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber
      ] & {
        id: BigNumber;
        timestamp: BigNumber;
        fromAddress: string;
        destAddress: string;
        fromAmount: BigNumber;
        fromCurrency: string;
        toCurrency: string;
        pendingDestAmount: BigNumber;
      }
    >;

    "pendingExchangeEntries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber
      ] & {
        id: BigNumber;
        timestamp: BigNumber;
        fromAddress: string;
        destAddress: string;
        fromAmount: BigNumber;
        fromCurrency: string;
        toCurrency: string;
        pendingDestAmount: BigNumber;
      }
    >;

    pendingMintOrBurnEntries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string] & {
        id: BigNumber;
        user: string;
        stakeCurrency: string;
        stakeAmount: BigNumber;
        entryType: string;
      }
    >;

    "pendingMintOrBurnEntries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string] & {
        id: BigNumber;
        user: string;
        stakeCurrency: string;
        stakeAmount: BigNumber;
        entryType: string;
      }
    >;

    rollback(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rollback(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCandidate(_candidate: string, overrides?: CallOverrides): Promise<void>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setExitPositionOnly(
      newValue: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExitPositionOnly(bool)"(
      newValue: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFoundationFeeHolder(
      _foundationFeeHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFoundationFeeHolder(address)"(
      _foundationFeeHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "settle(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settlementDelayPassed(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "settlementDelayPassed(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminChanged(oldAdmin: null, newAdmin: null): EventFilter;

    CachedAddressUpdated(name: null, addr: null): EventFilter;

    CandidateChanged(oldCandidate: null, newCandidate: null): EventFilter;

    ExchangeAsset(
      fromAddress: null,
      sourceKey: null,
      sourceAmount: null,
      destAddress: null,
      destKey: null,
      destRecived: null,
      feeForPool: null,
      feeForFoundation: null
    ): EventFilter;

    ExitPositionOnlyChanged(oldValue: null, newValue: null): EventFilter;

    FoundationFeeHolderChanged(oldHolder: null, newHolder: null): EventFilter;

    PendingExchangeAdded(
      id: null,
      fromAddress: null,
      destAddress: null,
      fromAmount: null,
      fromCurrency: null,
      toCurrency: null,
      pendingDestAmount: null
    ): EventFilter;

    PendingExchangeReverted(id: null): EventFilter;

    PendingExchangeSettled(
      id: null,
      settler: null,
      destRecived: null,
      destAmount: null,
      feeForPool: null,
      feeForFoundation: null,
      fromCurrencyPrice: null,
      toCurrencyPrice: null
    ): EventFilter;

    PendingMintOrBurnSettled(
      id: null,
      user: null,
      stakeCurrency: null,
      stakeAmount: null,
      entryType: null
    ): EventFilter;
  };

  estimateGas: {
    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    becomeAdmin(overrides?: Overrides): Promise<BigNumber>;

    "becomeAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    canOnlyBeReverted(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canOnlyBeReverted(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    deviationSatisfied(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deviationSatisfied(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exchange(bytes32,uint256,address,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exchangeFromCollateral(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exchangeFromCollateral(bytes32,uint256,address,bytes32,bytes32,uint256)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitPositionOnly(overrides?: CallOverrides): Promise<BigNumber>;

    "exitPositionOnly()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_admin: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastPendingExchangeEntryId(overrides?: CallOverrides): Promise<BigNumber>;

    "lastPendingExchangeEntryId()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingExchangeEntries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingExchangeEntries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMintOrBurnEntries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingMintOrBurnEntries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rollback(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rollback(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCandidate(_candidate: string, overrides?: Overrides): Promise<BigNumber>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setExitPositionOnly(
      newValue: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setExitPositionOnly(bool)"(
      newValue: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFoundationFeeHolder(
      _foundationFeeHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFoundationFeeHolder(address)"(
      _foundationFeeHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settle(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settle(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settlementDelayPassed(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "settlementDelayPassed(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    becomeAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    canOnlyBeReverted(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canOnlyBeReverted(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deviationSatisfied(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deviationSatisfied(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exchange(bytes32,uint256,address,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exchangeFromCollateral(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exchangeFromCollateral(bytes32,uint256,address,bytes32,bytes32,uint256)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitPositionOnly(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exitPositionOnly()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastPendingExchangeEntryId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastPendingExchangeEntryId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingExchangeEntries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingExchangeEntries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingMintOrBurnEntries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingMintOrBurnEntries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rollback(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rollback(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setExitPositionOnly(
      newValue: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setExitPositionOnly(bool)"(
      newValue: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFoundationFeeHolder(
      _foundationFeeHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFoundationFeeHolder(address)"(
      _foundationFeeHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settle(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settle(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settlementDelayPassed(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "settlementDelayPassed(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
