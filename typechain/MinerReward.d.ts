/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MinerRewardInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_RATE()": FunctionFragment;
    "DEFAULT_TOTAL_REWARD()": FunctionFragment;
    "PERIOD_LENGTH()": FunctionFragment;
    "addPool(uint256,address,address,uint256)": FunctionFragment;
    "deposit(address,uint256,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256,address)": FunctionFragment;
    "exchangeRewardInfo(uint256)": FunctionFragment;
    "firstPeriodStartTime()": FunctionFragment;
    "getCurrentPeriodId()": FunctionFragment;
    "getStakeToken(uint256)": FunctionFragment;
    "harvest(uint256)": FunctionFragment;
    "initialize(uint256,uint256)": FunctionFragment;
    "lockers(uint256)": FunctionFragment;
    "massUpdatePools(uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingReward(uint256,address)": FunctionFragment;
    "platformToken()": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "redeemaleReward(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPerBlock()": FunctionFragment;
    "sendExchangeReward(address,uint256)": FunctionFragment;
    "setExchangeRewardInfo(uint256,uint256,uint256)": FunctionFragment;
    "setPool(uint256,uint256,address,bool)": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "totalPendingReward(uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAddressCache(address)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_TOTAL_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERIOD_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRewardInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "firstPeriodStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPeriodId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "platformToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemaleReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendExchangeReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeRewardInfo",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPool",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPendingReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAddressCache",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_TOTAL_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERIOD_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstPeriodStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPeriodId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemaleReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendExchangeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAddressCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CachedAddressUpdated(bytes32,address)": EventFragment;
    "Deposit(address,uint256,uint256,address)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256,address)": EventFragment;
    "ExchangeRewardSent(address,uint256,uint256)": EventFragment;
    "Harvest(address,uint256,uint256,address)": EventFragment;
    "LogPoolAddition(uint256,uint256,address,address)": EventFragment;
    "LogSetPool(uint256,uint256,address,bool)": EventFragment;
    "LogUpdatePool(uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetExchangeRewardInfo(uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CachedAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeRewardSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPoolAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetExchangeRewardInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class MinerReward extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MinerRewardInterface;

  functions: {
    DEFAULT_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "DEFAULT_RATE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_TOTAL_REWARD(overrides?: CallOverrides): Promise<[BigNumber]>;

    "DEFAULT_TOTAL_REWARD()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERIOD_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PERIOD_LENGTH()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addPool(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(uint256,address,address,uint256)"(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exchangeRewardInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        totalReward: BigNumber;
        rewardSent: BigNumber;
      }
    >;

    "exchangeRewardInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        totalReward: BigNumber;
        rewardSent: BigNumber;
      }
    >;

    firstPeriodStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "firstPeriodStartTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentPeriodId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentPeriodId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakeToken(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getStakeToken(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    harvest(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _firstPeriodStartTime: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint256,uint256)"(
      _firstPeriodStartTime: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lockers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "lockers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    platformToken(overrides?: CallOverrides): Promise<[string]>;

    "platformToken()"(overrides?: CallOverrides): Promise<[string]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        stakeToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        stakeToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemaleReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "redeemaleReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendExchangeReward(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendExchangeReward(address,uint256)"(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setExchangeRewardInfo(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setExchangeRewardInfo(uint256,uint256,uint256)"(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPool(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalPendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        fundedBy: string;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        fundedBy: string;
      }
    >;

    withdraw(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  "DEFAULT_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_TOTAL_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

  "DEFAULT_TOTAL_REWARD()"(overrides?: CallOverrides): Promise<BigNumber>;

  PERIOD_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  "PERIOD_LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

  addPool(
    allocPoint: BigNumberish,
    _stakeToken: string,
    _locker: string,
    _startBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(uint256,address,address,uint256)"(
    allocPoint: BigNumberish,
    _stakeToken: string,
    _locker: string,
    _startBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _for: string,
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,uint256)"(
    _for: string,
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256,address)"(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exchangeRewardInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rate: BigNumber;
      totalReward: BigNumber;
      rewardSent: BigNumber;
    }
  >;

  "exchangeRewardInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rate: BigNumber;
      totalReward: BigNumber;
      rewardSent: BigNumber;
    }
  >;

  firstPeriodStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "firstPeriodStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentPeriodId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getStakeToken(_pid: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getStakeToken(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  harvest(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvest(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _firstPeriodStartTime: BigNumberish,
    _rewardPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint256,uint256)"(
    _firstPeriodStartTime: BigNumberish,
    _rewardPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lockers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "lockers(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  massUpdatePools(
    pids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "massUpdatePools(uint256[])"(
    pids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingReward(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  platformToken(overrides?: CallOverrides): Promise<string>;

  "platformToken()"(overrides?: CallOverrides): Promise<string>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      stakeToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardPerShare: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      stakeToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardPerShare: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  redeemaleReward(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "redeemaleReward(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  sendExchangeReward(
    _recipient: string,
    exchangeAmountInUSD: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendExchangeReward(address,uint256)"(
    _recipient: string,
    exchangeAmountInUSD: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setExchangeRewardInfo(
    _periodId: BigNumberish,
    _rate: BigNumberish,
    _totalReward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setExchangeRewardInfo(uint256,uint256,uint256)"(
    _periodId: BigNumberish,
    _rate: BigNumberish,
    _totalReward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPool(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _locker: string,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPool(uint256,uint256,address,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _locker: string,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalPendingReward(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalPendingReward(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAddressCache(
    _addressStorage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAddressCache(address)"(
    _addressStorage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePool(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      fundedBy: string;
    }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      fundedBy: string;
    }
  >;

  withdraw(
    _for: string,
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,uint256)"(
    _for: string,
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_TOTAL_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_TOTAL_REWARD()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERIOD_LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(uint256,address,address,uint256)"(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeRewardInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        totalReward: BigNumber;
        rewardSent: BigNumber;
      }
    >;

    "exchangeRewardInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        totalReward: BigNumber;
        rewardSent: BigNumber;
      }
    >;

    firstPeriodStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriodStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPeriodId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeToken(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getStakeToken(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    harvest(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _firstPeriodStartTime: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,uint256)"(
      _firstPeriodStartTime: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "lockers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformToken(overrides?: CallOverrides): Promise<string>;

    "platformToken()"(overrides?: CallOverrides): Promise<string>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        stakeToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        stakeToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemaleReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemaleReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    sendExchangeReward(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendExchangeReward(address,uint256)"(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangeRewardInfo(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExchangeRewardInfo(uint256,uint256,uint256)"(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPool(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalPendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        stakeToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
      }
    >;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        stakeToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
      }
    >;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        fundedBy: string;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        fundedBy: string;
      }
    >;

    withdraw(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CachedAddressUpdated(name: null, addr: null): EventFilter;

    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): EventFilter;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): EventFilter;

    ExchangeRewardSent(
      recipient: string | null,
      periodId: null,
      reward: null
    ): EventFilter;

    Harvest(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): EventFilter;

    LogPoolAddition(
      pid: BigNumberish | null,
      allocPoint: null,
      lpToken: string | null,
      rewarder: string | null
    ): EventFilter;

    LogSetPool(
      pid: BigNumberish | null,
      allocPoint: null,
      rewarder: null,
      overwrite: null
    ): EventFilter;

    LogUpdatePool(
      pid: BigNumberish | null,
      lastRewardBlock: null,
      lpSupply: null,
      accRewardPerShare: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    SetExchangeRewardInfo(
      periodId: null,
      rate: null,
      reward: null
    ): EventFilter;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): EventFilter;
  };

  estimateGas: {
    DEFAULT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_TOTAL_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_TOTAL_REWARD()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERIOD_LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(uint256,address,address,uint256)"(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exchangeRewardInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchangeRewardInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstPeriodStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriodStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPeriodId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeToken(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStakeToken(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _firstPeriodStartTime: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint256,uint256)"(
      _firstPeriodStartTime: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lockers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "lockers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformToken(overrides?: CallOverrides): Promise<BigNumber>;

    "platformToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemaleReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemaleReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    sendExchangeReward(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendExchangeReward(address,uint256)"(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setExchangeRewardInfo(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setExchangeRewardInfo(uint256,uint256,uint256)"(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPool(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalPendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePool(pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DEFAULT_RATE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_TOTAL_REWARD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_TOTAL_REWARD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERIOD_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERIOD_LENGTH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPool(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(uint256,address,address,uint256)"(
      allocPoint: BigNumberish,
      _stakeToken: string,
      _locker: string,
      _startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exchangeRewardInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exchangeRewardInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstPeriodStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "firstPeriodStartTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPeriodId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentPeriodId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeToken(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStakeToken(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvest(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _firstPeriodStartTime: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,uint256)"(
      _firstPeriodStartTime: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lockers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    platformToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "platformToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemaleReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "redeemaleReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardPerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendExchangeReward(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendExchangeReward(address,uint256)"(
      _recipient: string,
      exchangeAmountInUSD: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setExchangeRewardInfo(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setExchangeRewardInfo(uint256,uint256,uint256)"(
      _periodId: BigNumberish,
      _rate: BigNumberish,
      _totalReward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPool(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _locker: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalPendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,uint256)"(
      _for: string,
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
