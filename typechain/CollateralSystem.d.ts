/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CollateralSystemInterface extends ethers.utils.Interface {
  functions: {
    "MAX_UINT256()": FunctionFragment;
    "__AdminUpgradeable_init(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "assetsStorage()": FunctionFragment;
    "becomeAdmin()": FunctionFragment;
    "buildBurnSystem()": FunctionFragment;
    "burnAndUnstake(uint256,bytes32,uint256)": FunctionFragment;
    "burnAndUnstakeFromExchange(address,uint256,bytes32,uint256)": FunctionFragment;
    "burnAndUnstakeMax(uint256,bytes32)": FunctionFragment;
    "burnNonFUSDAndUnstake(bytes32,uint256,bytes32,uint256)": FunctionFragment;
    "calcBuildRatio(address,bytes32,uint256,uint256)": FunctionFragment;
    "candidate()": FunctionFragment;
    "debtSystem()": FunctionFragment;
    "exchangeSystem()": FunctionFragment;
    "getCatalystResult(bytes32,uint256,uint256)": FunctionFragment;
    "getFreeCollateralInUsd(address,bytes32)": FunctionFragment;
    "getMaxBuildAmount(address,bytes32,uint256,bytes32,uint256)": FunctionFragment;
    "getRatio(address,bytes32)": FunctionFragment;
    "getSystemTotalCollateralInUsd()": FunctionFragment;
    "getUserCollateral(address,bytes32)": FunctionFragment;
    "getUserCollateralInUsd(address,bytes32)": FunctionFragment;
    "getUserCollaterals(address)": FunctionFragment;
    "getUserTotalCollateralInUsd(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isSatisfyTargetRatio(address,bytes32)": FunctionFragment;
    "liquidation()": FunctionFragment;
    "mCatalyst()": FunctionFragment;
    "mConfig()": FunctionFragment;
    "maxRedeemableToken(address,bytes32)": FunctionFragment;
    "minerReward()": FunctionFragment;
    "moveCollateral(address,address,bytes32,uint256)": FunctionFragment;
    "paused()": FunctionFragment;
    "platformToken()": FunctionFragment;
    "priceGetter()": FunctionFragment;
    "redeem(bytes32,uint256)": FunctionFragment;
    "redeemMax(bytes32)": FunctionFragment;
    "router()": FunctionFragment;
    "setCandidate(address)": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "stakeAndBuild(bytes32,uint256,uint256,uint256)": FunctionFragment;
    "stakeAndBuildNonFUSD(bytes32,uint256,bytes32,uint256,uint256)": FunctionFragment;
    "tokenInfos(bytes32)": FunctionFragment;
    "tokenSymbol(uint256)": FunctionFragment;
    "uniqueId()": FunctionFragment;
    "updateAddressCache(address)": FunctionFragment;
    "updateTokenInfo(bytes32,address,uint256,bool)": FunctionFragment;
    "updateTokenInfos(bytes32[],address[],uint256[],bool[])": FunctionFragment;
    "userCollateralData(address,bytes32)": FunctionFragment;
    "userLockedData(address,bytes32)": FunctionFragment;
    "withdrawLockedTokens(address,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_UINT256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__AdminUpgradeable_init",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetsStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "becomeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buildBurnSystem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnAndUnstake",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnAndUnstakeFromExchange",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnAndUnstakeMax",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnNonFUSDAndUnstake",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcBuildRatio",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "debtSystem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeSystem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCatalystResult",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeCollateralInUsd",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxBuildAmount",
    values: [string, BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRatio",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemTotalCollateralInUsd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCollateral",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCollateralInUsd",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCollaterals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalCollateralInUsd",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSatisfyTargetRatio",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mCatalyst", values?: undefined): string;
  encodeFunctionData(functionFragment: "mConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxRedeemableToken",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minerReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moveCollateral",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceGetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemMax",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCandidate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "stakeAndBuild",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAndBuildNonFUSD",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInfos",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSymbol",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uniqueId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAddressCache",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenInfo",
    values: [BytesLike, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenInfos",
    values: [BytesLike[], string[], BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userCollateralData",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userLockedData",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLockedTokens",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_UINT256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__AdminUpgradeable_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetsStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "becomeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildBurnSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnAndUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnAndUnstakeFromExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnAndUnstakeMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnNonFUSDAndUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBuildRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debtSystem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCatalystResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeCollateralInUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxBuildAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSystemTotalCollateralInUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCollateralInUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCollaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalCollateralInUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSatisfyTargetRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mCatalyst", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxRedeemableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceGetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeAndBuild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAndBuildNonFUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInfos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uniqueId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAddressCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollateralData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLockedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLockedTokens",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Burn(address,bytes32,uint256,uint256,uint256,uint256)": EventFragment;
    "CachedAddressUpdated(bytes32,address)": EventFragment;
    "CandidateChanged(address,address)": EventFragment;
    "CollateralLog(address,bytes32,uint256,uint256)": EventFragment;
    "CollateralMoved(address,address,bytes32,uint256)": EventFragment;
    "Mint(address,bytes32,uint256,uint256,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RedeemCollateral(address,bytes32,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdateTokenSetting(bytes32,address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CachedAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CandidateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralMoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTokenSetting"): EventFragment;
}

export class CollateralSystem extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CollateralSystemInterface;

  functions: {
    MAX_UINT256(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_UINT256()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    "admin()"(overrides?: CallOverrides): Promise<[string]>;

    assetsStorage(overrides?: CallOverrides): Promise<[string]>;

    "assetsStorage()"(overrides?: CallOverrides): Promise<[string]>;

    becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

    buildBurnSystem(overrides?: CallOverrides): Promise<[string]>;

    "buildBurnSystem()"(overrides?: CallOverrides): Promise<[string]>;

    burnAndUnstake(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnAndUnstake(uint256,bytes32,uint256)"(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnAndUnstakeFromExchange(
      user: string,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnAndUnstakeFromExchange(address,uint256,bytes32,uint256)"(
      user: string,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnAndUnstakeMax(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnAndUnstakeMax(uint256,bytes32)"(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnNonFUSDAndUnstake(
      burnCurrency: BytesLike,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnNonFUSDAndUnstake(bytes32,uint256,bytes32,uint256)"(
      burnCurrency: BytesLike,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calcBuildRatio(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcBuildRatio(address,bytes32,uint256,uint256)"(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    debtSystem(overrides?: CallOverrides): Promise<[string]>;

    "debtSystem()"(overrides?: CallOverrides): Promise<[string]>;

    exchangeSystem(overrides?: CallOverrides): Promise<[string]>;

    "exchangeSystem()"(overrides?: CallOverrides): Promise<[string]>;

    getCatalystResult(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getCatalystResult(bytes32,uint256,uint256)"(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getFreeCollateralInUsd(
      user: string,
      currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getFreeCollateralInUsd(address,bytes32)"(
      user: string,
      currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxBuildAmount(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMaxBuildAmount(address,bytes32,uint256,bytes32,uint256)"(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRatio(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getRatio(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getSystemTotalCollateralInUsd(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    "getSystemTotalCollateralInUsd()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    getUserCollateral(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUserCollateral(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserCollateralInUsd(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    "getUserCollateralInUsd(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    getUserCollaterals(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "getUserCollaterals(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getUserTotalCollateralInUsd(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    "getUserTotalCollateralInUsd(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    initialize(
      _admin: string,
      _FUSDTokenAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _admin: string,
      _FUSDTokenAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isSatisfyTargetRatio(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isSatisfyTargetRatio(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidation(overrides?: CallOverrides): Promise<[string]>;

    "liquidation()"(overrides?: CallOverrides): Promise<[string]>;

    mCatalyst(overrides?: CallOverrides): Promise<[string]>;

    "mCatalyst()"(overrides?: CallOverrides): Promise<[string]>;

    mConfig(overrides?: CallOverrides): Promise<[string]>;

    "mConfig()"(overrides?: CallOverrides): Promise<[string]>;

    maxRedeemableToken(
      user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "maxRedeemableToken(address,bytes32)"(
      user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minerReward(overrides?: CallOverrides): Promise<[string]>;

    "minerReward()"(overrides?: CallOverrides): Promise<[string]>;

    moveCollateral(
      fromUser: string,
      toUser: string,
      currency: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "moveCollateral(address,address,bytes32,uint256)"(
      fromUser: string,
      toUser: string,
      currency: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    platformToken(overrides?: CallOverrides): Promise<[string]>;

    "platformToken()"(overrides?: CallOverrides): Promise<[string]>;

    priceGetter(overrides?: CallOverrides): Promise<[string]>;

    "priceGetter()"(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _currency: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeem(bytes32,uint256)"(
      _currency: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemMax(
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemMax(bytes32)"(
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPaused(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPaused(bool)"(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeAndBuild(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeAndBuild(bytes32,uint256,uint256,uint256)"(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeAndBuildNonFUSD(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeAndBuildNonFUSD(bytes32,uint256,bytes32,uint256,uint256)"(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenInfos(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        tokenAddress: string;
        minCollateral: BigNumber;
        totalCollateral: BigNumber;
        bClose: boolean;
      }
    >;

    "tokenInfos(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        tokenAddress: string;
        minCollateral: BigNumber;
        totalCollateral: BigNumber;
        bClose: boolean;
      }
    >;

    tokenSymbol(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenSymbol(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    uniqueId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "uniqueId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTokenInfo(
      _currency: BytesLike,
      _tokenAddress: string,
      _minCollateral: BigNumberish,
      _close: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTokenInfo(bytes32,address,uint256,bool)"(
      _currency: BytesLike,
      _tokenAddress: string,
      _minCollateral: BigNumberish,
      _close: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTokenInfos(
      _symbols: BytesLike[],
      _tokenAddresses: string[],
      _minCollateral: BigNumberish[],
      _closes: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTokenInfos(bytes32[],address[],uint256[],bool[])"(
      _symbols: BytesLike[],
      _tokenAddresses: string[],
      _minCollateral: BigNumberish[],
      _closes: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userCollateralData(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateral: BigNumber }>;

    "userCollateralData(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateral: BigNumber }>;

    userLockedData(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lockedValue: BigNumber }>;

    "userLockedData(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lockedValue: BigNumber }>;

    withdrawLockedTokens(
      user: string,
      currency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawLockedTokens(address,bytes32)"(
      user: string,
      currency: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_UINT256()"(overrides?: CallOverrides): Promise<BigNumber>;

  __AdminUpgradeable_init(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__AdminUpgradeable_init(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  assetsStorage(overrides?: CallOverrides): Promise<string>;

  "assetsStorage()"(overrides?: CallOverrides): Promise<string>;

  becomeAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "becomeAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  buildBurnSystem(overrides?: CallOverrides): Promise<string>;

  "buildBurnSystem()"(overrides?: CallOverrides): Promise<string>;

  burnAndUnstake(
    burnAmount: BigNumberish,
    unStakeCurrency: BytesLike,
    unStakeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnAndUnstake(uint256,bytes32,uint256)"(
    burnAmount: BigNumberish,
    unStakeCurrency: BytesLike,
    unStakeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnAndUnstakeFromExchange(
    user: string,
    burnAmount: BigNumberish,
    unStakeCurrency: BytesLike,
    unStakeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnAndUnstakeFromExchange(address,uint256,bytes32,uint256)"(
    user: string,
    burnAmount: BigNumberish,
    unStakeCurrency: BytesLike,
    unStakeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnAndUnstakeMax(
    burnAmount: BigNumberish,
    unStakeCurrency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnAndUnstakeMax(uint256,bytes32)"(
    burnAmount: BigNumberish,
    unStakeCurrency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnNonFUSDAndUnstake(
    burnCurrency: BytesLike,
    burnAmount: BigNumberish,
    unStakeCurrency: BytesLike,
    unStakeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnNonFUSDAndUnstake(bytes32,uint256,bytes32,uint256)"(
    burnCurrency: BytesLike,
    burnAmount: BigNumberish,
    unStakeCurrency: BytesLike,
    unStakeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calcBuildRatio(
    user: string,
    stakeCurrency: BytesLike,
    stakeAmount: BigNumberish,
    lockedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcBuildRatio(address,bytes32,uint256,uint256)"(
    user: string,
    stakeCurrency: BytesLike,
    stakeAmount: BigNumberish,
    lockedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  debtSystem(overrides?: CallOverrides): Promise<string>;

  "debtSystem()"(overrides?: CallOverrides): Promise<string>;

  exchangeSystem(overrides?: CallOverrides): Promise<string>;

  "exchangeSystem()"(overrides?: CallOverrides): Promise<string>;

  getCatalystResult(
    stakeCurrency: BytesLike,
    stakeAmount: BigNumberish,
    lockedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "getCatalystResult(bytes32,uint256,uint256)"(
    stakeCurrency: BytesLike,
    stakeAmount: BigNumberish,
    lockedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getFreeCollateralInUsd(
    user: string,
    currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFreeCollateralInUsd(address,bytes32)"(
    user: string,
    currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxBuildAmount(
    user: string,
    stakeCurrency: BytesLike,
    stakeAmount: BigNumberish,
    buildCurrency: BytesLike,
    lockedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMaxBuildAmount(address,bytes32,uint256,bytes32,uint256)"(
    user: string,
    stakeCurrency: BytesLike,
    stakeAmount: BigNumberish,
    buildCurrency: BytesLike,
    lockedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRatio(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "getRatio(address,bytes32)"(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getSystemTotalCollateralInUsd(overrides?: CallOverrides): Promise<BigNumber>;

  "getSystemTotalCollateralInUsd()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserCollateral(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserCollateral(address,bytes32)"(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserCollateralInUsd(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserCollateralInUsd(address,bytes32)"(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserCollaterals(
    _user: string,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  "getUserCollaterals(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getUserTotalCollateralInUsd(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserTotalCollateralInUsd(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _admin: string,
    _FUSDTokenAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _admin: string,
    _FUSDTokenAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isSatisfyTargetRatio(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isSatisfyTargetRatio(address,bytes32)"(
    _user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidation(overrides?: CallOverrides): Promise<string>;

  "liquidation()"(overrides?: CallOverrides): Promise<string>;

  mCatalyst(overrides?: CallOverrides): Promise<string>;

  "mCatalyst()"(overrides?: CallOverrides): Promise<string>;

  mConfig(overrides?: CallOverrides): Promise<string>;

  "mConfig()"(overrides?: CallOverrides): Promise<string>;

  maxRedeemableToken(
    user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "maxRedeemableToken(address,bytes32)"(
    user: string,
    _currency: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minerReward(overrides?: CallOverrides): Promise<string>;

  "minerReward()"(overrides?: CallOverrides): Promise<string>;

  moveCollateral(
    fromUser: string,
    toUser: string,
    currency: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "moveCollateral(address,address,bytes32,uint256)"(
    fromUser: string,
    toUser: string,
    currency: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  platformToken(overrides?: CallOverrides): Promise<string>;

  "platformToken()"(overrides?: CallOverrides): Promise<string>;

  priceGetter(overrides?: CallOverrides): Promise<string>;

  "priceGetter()"(overrides?: CallOverrides): Promise<string>;

  redeem(
    _currency: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeem(bytes32,uint256)"(
    _currency: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemMax(
    _currency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemMax(bytes32)"(
    _currency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  setCandidate(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCandidate(address)"(
    _candidate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPaused(
    _paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPaused(bool)"(
    _paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeAndBuild(
    stakeCurrency: BytesLike,
    stakeAmount: BigNumberish,
    buildAmount: BigNumberish,
    lockedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeAndBuild(bytes32,uint256,uint256,uint256)"(
    stakeCurrency: BytesLike,
    stakeAmount: BigNumberish,
    buildAmount: BigNumberish,
    lockedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeAndBuildNonFUSD(
    stakeCurrency: BytesLike,
    stakeAmount: BigNumberish,
    buildCurrency: BytesLike,
    buildAmount: BigNumberish,
    lockedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeAndBuildNonFUSD(bytes32,uint256,bytes32,uint256,uint256)"(
    stakeCurrency: BytesLike,
    stakeAmount: BigNumberish,
    buildCurrency: BytesLike,
    buildAmount: BigNumberish,
    lockedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenInfos(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      tokenAddress: string;
      minCollateral: BigNumber;
      totalCollateral: BigNumber;
      bClose: boolean;
    }
  >;

  "tokenInfos(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      tokenAddress: string;
      minCollateral: BigNumber;
      totalCollateral: BigNumber;
      bClose: boolean;
    }
  >;

  tokenSymbol(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenSymbol(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  uniqueId(overrides?: CallOverrides): Promise<BigNumber>;

  "uniqueId()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateAddressCache(
    _addressStorage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAddressCache(address)"(
    _addressStorage: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTokenInfo(
    _currency: BytesLike,
    _tokenAddress: string,
    _minCollateral: BigNumberish,
    _close: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTokenInfo(bytes32,address,uint256,bool)"(
    _currency: BytesLike,
    _tokenAddress: string,
    _minCollateral: BigNumberish,
    _close: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTokenInfos(
    _symbols: BytesLike[],
    _tokenAddresses: string[],
    _minCollateral: BigNumberish[],
    _closes: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTokenInfos(bytes32[],address[],uint256[],bool[])"(
    _symbols: BytesLike[],
    _tokenAddresses: string[],
    _minCollateral: BigNumberish[],
    _closes: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userCollateralData(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userCollateralData(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userLockedData(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userLockedData(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawLockedTokens(
    user: string,
    currency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawLockedTokens(address,bytes32)"(
    user: string,
    currency: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_UINT256()"(overrides?: CallOverrides): Promise<BigNumber>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    assetsStorage(overrides?: CallOverrides): Promise<string>;

    "assetsStorage()"(overrides?: CallOverrides): Promise<string>;

    becomeAdmin(overrides?: CallOverrides): Promise<void>;

    "becomeAdmin()"(overrides?: CallOverrides): Promise<void>;

    buildBurnSystem(overrides?: CallOverrides): Promise<string>;

    "buildBurnSystem()"(overrides?: CallOverrides): Promise<string>;

    burnAndUnstake(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnAndUnstake(uint256,bytes32,uint256)"(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnAndUnstakeFromExchange(
      user: string,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnAndUnstakeFromExchange(address,uint256,bytes32,uint256)"(
      user: string,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnAndUnstakeMax(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnAndUnstakeMax(uint256,bytes32)"(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    burnNonFUSDAndUnstake(
      burnCurrency: BytesLike,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnNonFUSDAndUnstake(bytes32,uint256,bytes32,uint256)"(
      burnCurrency: BytesLike,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcBuildRatio(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBuildRatio(address,bytes32,uint256,uint256)"(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    debtSystem(overrides?: CallOverrides): Promise<string>;

    "debtSystem()"(overrides?: CallOverrides): Promise<string>;

    exchangeSystem(overrides?: CallOverrides): Promise<string>;

    "exchangeSystem()"(overrides?: CallOverrides): Promise<string>;

    getCatalystResult(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getCatalystResult(bytes32,uint256,uint256)"(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getFreeCollateralInUsd(
      user: string,
      currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFreeCollateralInUsd(address,bytes32)"(
      user: string,
      currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxBuildAmount(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxBuildAmount(address,bytes32,uint256,bytes32,uint256)"(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRatio(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getRatio(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getSystemTotalCollateralInUsd(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSystemTotalCollateralInUsd()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCollateral(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserCollateral(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCollateralInUsd(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserCollateralInUsd(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCollaterals(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "getUserCollaterals(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getUserTotalCollateralInUsd(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserTotalCollateralInUsd(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _admin: string,
      _FUSDTokenAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _admin: string,
      _FUSDTokenAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isSatisfyTargetRatio(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isSatisfyTargetRatio(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidation(overrides?: CallOverrides): Promise<string>;

    "liquidation()"(overrides?: CallOverrides): Promise<string>;

    mCatalyst(overrides?: CallOverrides): Promise<string>;

    "mCatalyst()"(overrides?: CallOverrides): Promise<string>;

    mConfig(overrides?: CallOverrides): Promise<string>;

    "mConfig()"(overrides?: CallOverrides): Promise<string>;

    maxRedeemableToken(
      user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxRedeemableToken(address,bytes32)"(
      user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minerReward(overrides?: CallOverrides): Promise<string>;

    "minerReward()"(overrides?: CallOverrides): Promise<string>;

    moveCollateral(
      fromUser: string,
      toUser: string,
      currency: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "moveCollateral(address,address,bytes32,uint256)"(
      fromUser: string,
      toUser: string,
      currency: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    platformToken(overrides?: CallOverrides): Promise<string>;

    "platformToken()"(overrides?: CallOverrides): Promise<string>;

    priceGetter(overrides?: CallOverrides): Promise<string>;

    "priceGetter()"(overrides?: CallOverrides): Promise<string>;

    redeem(
      _currency: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "redeem(bytes32,uint256)"(
      _currency: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    redeemMax(_currency: BytesLike, overrides?: CallOverrides): Promise<void>;

    "redeemMax(bytes32)"(
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    setCandidate(_candidate: string, overrides?: CallOverrides): Promise<void>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    "setPaused(bool)"(
      _paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeAndBuild(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeAndBuild(bytes32,uint256,uint256,uint256)"(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeAndBuildNonFUSD(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeAndBuildNonFUSD(bytes32,uint256,bytes32,uint256,uint256)"(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenInfos(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        tokenAddress: string;
        minCollateral: BigNumber;
        totalCollateral: BigNumber;
        bClose: boolean;
      }
    >;

    "tokenInfos(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        tokenAddress: string;
        minCollateral: BigNumber;
        totalCollateral: BigNumber;
        bClose: boolean;
      }
    >;

    tokenSymbol(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenSymbol(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    uniqueId(overrides?: CallOverrides): Promise<BigNumber>;

    "uniqueId()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenInfo(
      _currency: BytesLike,
      _tokenAddress: string,
      _minCollateral: BigNumberish,
      _close: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateTokenInfo(bytes32,address,uint256,bool)"(
      _currency: BytesLike,
      _tokenAddress: string,
      _minCollateral: BigNumberish,
      _close: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateTokenInfos(
      _symbols: BytesLike[],
      _tokenAddresses: string[],
      _minCollateral: BigNumberish[],
      _closes: boolean[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateTokenInfos(bytes32[],address[],uint256[],bool[])"(
      _symbols: BytesLike[],
      _tokenAddresses: string[],
      _minCollateral: BigNumberish[],
      _closes: boolean[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    userCollateralData(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userCollateralData(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userLockedData(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userLockedData(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLockedTokens(
      user: string,
      currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawLockedTokens(address,bytes32)"(
      user: string,
      currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AdminChanged(oldAdmin: null, newAdmin: null): EventFilter;

    Burn(
      user: null,
      unstakingCurrency: null,
      unstakingAmount: null,
      unlockedAmount: null,
      cleanedDebt: null,
      ratio: null
    ): EventFilter;

    CachedAddressUpdated(name: null, addr: null): EventFilter;

    CandidateChanged(oldCandidate: null, newCandidate: null): EventFilter;

    CollateralLog(
      user: null,
      _currency: null,
      _amount: null,
      _userTotal: null
    ): EventFilter;

    CollateralMoved(
      fromUser: null,
      toUser: null,
      currency: null,
      amount: null
    ): EventFilter;

    Mint(
      user: null,
      collateralCurrency: null,
      collateralAmount: null,
      lockedAmount: null,
      mintedAmount: null,
      ratio: null
    ): EventFilter;

    Paused(account: null): EventFilter;

    RedeemCollateral(
      user: null,
      _currency: null,
      _amount: null,
      _userTotal: null
    ): EventFilter;

    Unpaused(account: null): EventFilter;

    UpdateTokenSetting(
      symbol: null,
      tokenAddress: null,
      minCollateral: null,
      close: null
    ): EventFilter;
  };

  estimateGas: {
    MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_UINT256()"(overrides?: CallOverrides): Promise<BigNumber>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetsStorage(overrides?: CallOverrides): Promise<BigNumber>;

    "assetsStorage()"(overrides?: CallOverrides): Promise<BigNumber>;

    becomeAdmin(overrides?: Overrides): Promise<BigNumber>;

    "becomeAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    buildBurnSystem(overrides?: CallOverrides): Promise<BigNumber>;

    "buildBurnSystem()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnAndUnstake(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnAndUnstake(uint256,bytes32,uint256)"(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnAndUnstakeFromExchange(
      user: string,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnAndUnstakeFromExchange(address,uint256,bytes32,uint256)"(
      user: string,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnAndUnstakeMax(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnAndUnstakeMax(uint256,bytes32)"(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnNonFUSDAndUnstake(
      burnCurrency: BytesLike,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnNonFUSDAndUnstake(bytes32,uint256,bytes32,uint256)"(
      burnCurrency: BytesLike,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    calcBuildRatio(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBuildRatio(address,bytes32,uint256,uint256)"(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtSystem(overrides?: CallOverrides): Promise<BigNumber>;

    "debtSystem()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeSystem(overrides?: CallOverrides): Promise<BigNumber>;

    "exchangeSystem()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCatalystResult(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCatalystResult(bytes32,uint256,uint256)"(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateralInUsd(
      user: string,
      currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFreeCollateralInUsd(address,bytes32)"(
      user: string,
      currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxBuildAmount(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxBuildAmount(address,bytes32,uint256,bytes32,uint256)"(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRatio(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRatio(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemTotalCollateralInUsd(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSystemTotalCollateralInUsd()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCollateral(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserCollateral(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCollateralInUsd(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserCollateralInUsd(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCollaterals(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserCollaterals(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalCollateralInUsd(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserTotalCollateralInUsd(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _admin: string,
      _FUSDTokenAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _admin: string,
      _FUSDTokenAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isSatisfyTargetRatio(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSatisfyTargetRatio(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidation(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidation()"(overrides?: CallOverrides): Promise<BigNumber>;

    mCatalyst(overrides?: CallOverrides): Promise<BigNumber>;

    "mCatalyst()"(overrides?: CallOverrides): Promise<BigNumber>;

    mConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "mConfig()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeemableToken(
      user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxRedeemableToken(address,bytes32)"(
      user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minerReward(overrides?: CallOverrides): Promise<BigNumber>;

    "minerReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    moveCollateral(
      fromUser: string,
      toUser: string,
      currency: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "moveCollateral(address,address,bytes32,uint256)"(
      fromUser: string,
      toUser: string,
      currency: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    platformToken(overrides?: CallOverrides): Promise<BigNumber>;

    "platformToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceGetter(overrides?: CallOverrides): Promise<BigNumber>;

    "priceGetter()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _currency: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeem(bytes32,uint256)"(
      _currency: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemMax(_currency: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "redeemMax(bytes32)"(
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCandidate(_candidate: string, overrides?: Overrides): Promise<BigNumber>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPaused(_paused: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setPaused(bool)"(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeAndBuild(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeAndBuild(bytes32,uint256,uint256,uint256)"(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeAndBuildNonFUSD(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeAndBuildNonFUSD(bytes32,uint256,bytes32,uint256,uint256)"(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenInfos(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenInfos(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenSymbol(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenSymbol(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueId(overrides?: CallOverrides): Promise<BigNumber>;

    "uniqueId()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateTokenInfo(
      _currency: BytesLike,
      _tokenAddress: string,
      _minCollateral: BigNumberish,
      _close: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateTokenInfo(bytes32,address,uint256,bool)"(
      _currency: BytesLike,
      _tokenAddress: string,
      _minCollateral: BigNumberish,
      _close: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateTokenInfos(
      _symbols: BytesLike[],
      _tokenAddresses: string[],
      _minCollateral: BigNumberish[],
      _closes: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateTokenInfos(bytes32[],address[],uint256[],bool[])"(
      _symbols: BytesLike[],
      _tokenAddresses: string[],
      _minCollateral: BigNumberish[],
      _closes: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    userCollateralData(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userCollateralData(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userLockedData(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userLockedData(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLockedTokens(
      user: string,
      currency: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawLockedTokens(address,bytes32)"(
      user: string,
      currency: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_UINT256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_UINT256()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __AdminUpgradeable_init(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__AdminUpgradeable_init(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetsStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetsStorage()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    becomeAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "becomeAdmin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    buildBurnSystem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buildBurnSystem()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnAndUnstake(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnAndUnstake(uint256,bytes32,uint256)"(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnAndUnstakeFromExchange(
      user: string,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnAndUnstakeFromExchange(address,uint256,bytes32,uint256)"(
      user: string,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnAndUnstakeMax(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnAndUnstakeMax(uint256,bytes32)"(
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnNonFUSDAndUnstake(
      burnCurrency: BytesLike,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnNonFUSDAndUnstake(bytes32,uint256,bytes32,uint256)"(
      burnCurrency: BytesLike,
      burnAmount: BigNumberish,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calcBuildRatio(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcBuildRatio(address,bytes32,uint256,uint256)"(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtSystem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debtSystem()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeSystem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exchangeSystem()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCatalystResult(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCatalystResult(bytes32,uint256,uint256)"(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreeCollateralInUsd(
      user: string,
      currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFreeCollateralInUsd(address,bytes32)"(
      user: string,
      currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxBuildAmount(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxBuildAmount(address,bytes32,uint256,bytes32,uint256)"(
      user: string,
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      lockedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRatio(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRatio(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSystemTotalCollateralInUsd(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSystemTotalCollateralInUsd()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserCollateral(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserCollateral(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserCollateralInUsd(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserCollateralInUsd(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserCollaterals(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserCollaterals(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTotalCollateralInUsd(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserTotalCollateralInUsd(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      _FUSDTokenAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _admin: string,
      _FUSDTokenAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isSatisfyTargetRatio(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSatisfyTargetRatio(address,bytes32)"(
      _user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidation()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mCatalyst(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mCatalyst()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mConfig()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeemableToken(
      user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxRedeemableToken(address,bytes32)"(
      user: string,
      _currency: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minerReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minerReward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moveCollateral(
      fromUser: string,
      toUser: string,
      currency: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "moveCollateral(address,address,bytes32,uint256)"(
      fromUser: string,
      toUser: string,
      currency: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "platformToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceGetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceGetter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _currency: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeem(bytes32,uint256)"(
      _currency: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemMax(
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemMax(bytes32)"(
      _currency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCandidate(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCandidate(address)"(
      _candidate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPaused(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPaused(bool)"(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeAndBuild(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeAndBuild(bytes32,uint256,uint256,uint256)"(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeAndBuildNonFUSD(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeAndBuildNonFUSD(bytes32,uint256,bytes32,uint256,uint256)"(
      stakeCurrency: BytesLike,
      stakeAmount: BigNumberish,
      buildCurrency: BytesLike,
      buildAmount: BigNumberish,
      lockedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenInfos(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenInfos(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenSymbol(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenSymbol(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniqueId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniqueId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAddressCache(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAddressCache(address)"(
      _addressStorage: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateTokenInfo(
      _currency: BytesLike,
      _tokenAddress: string,
      _minCollateral: BigNumberish,
      _close: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTokenInfo(bytes32,address,uint256,bool)"(
      _currency: BytesLike,
      _tokenAddress: string,
      _minCollateral: BigNumberish,
      _close: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateTokenInfos(
      _symbols: BytesLike[],
      _tokenAddresses: string[],
      _minCollateral: BigNumberish[],
      _closes: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTokenInfos(bytes32[],address[],uint256[],bool[])"(
      _symbols: BytesLike[],
      _tokenAddresses: string[],
      _minCollateral: BigNumberish[],
      _closes: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userCollateralData(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userCollateralData(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userLockedData(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userLockedData(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawLockedTokens(
      user: string,
      currency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawLockedTokens(address,bytes32)"(
      user: string,
      currency: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
