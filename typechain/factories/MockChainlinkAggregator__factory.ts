/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockChainlinkAggregator } from "../MockChainlinkAggregator";

export class MockChainlinkAggregator__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<MockChainlinkAggregator> {
    return super.deploy(overrides || {}) as Promise<MockChainlinkAggregator>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockChainlinkAggregator {
    return super.attach(address) as MockChainlinkAggregator;
  }
  connect(signer: Signer): MockChainlinkAggregator__factory {
    return super.connect(signer) as MockChainlinkAggregator__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockChainlinkAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockChainlinkAggregator;
  }
}

const _abi = [
  {
    inputs: [],
    name: "_answer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_answeredInRound",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_roundId",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_startedAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_updatedAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "newDecimals",
        type: "uint8",
      },
    ],
    name: "setDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "newRoundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "newAnswer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "newStartedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newUpdatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "newAnsweredInRound",
        type: "uint80",
      },
    ],
    name: "setLatestRoundData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102c3806100206000396000f3fe608060405234801561001057600080fd5b506004361061008e5760003560e01c80631e185e4d14610093578063313ce567146100b757806332424aa3146100d55780633a1281cb146100dd5780634005e681146100f7578063545370b21461013b5780637a1395aa14610143578063cb40372214610163578063feaf968c1461016b578063fecdc14a146101b7575b600080fd5b61009b6101bf565b604080516001600160501b039092168252519081900360200190f35b6100bf6101d3565b6040805160ff9092168252519081900360200190f35b6100bf6101dc565b6100e56101e5565b60408051918252519081900360200190f35b610139600480360360a081101561010d57600080fd5b506001600160501b038135811691602081013591604082013591606081013591608090910135166101eb565b005b6100e5610232565b6101396004803603602081101561015957600080fd5b503560ff16610238565b6100e561024e565b610173610254565b60405180866001600160501b03168152602001858152602001848152602001838152602001826001600160501b031681526020019550505050505060405180910390f35b61009b61027e565b60005461010090046001600160501b031681565b60005460ff1690565b60005460ff1681565b60035481565b60008054610100600160581b0319166101006001600160501b0397881602179055600193909355600291909155600355600480546001600160501b03191691909216179055565b60025481565b6000805460ff191660ff92909216919091179055565b60015481565b6000546001546002546003546004546001600160501b036101009095048516959394929391921690565b6004546001600160501b03168156fea2646970667358221220c792eefcaeb82b29050d7ce49500d3898b264d5b13861bd761cadc0cdc862dab64736f6c634300060c0033";
