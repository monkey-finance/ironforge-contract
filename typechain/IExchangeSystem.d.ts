/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IExchangeSystemInterface extends ethers.utils.Interface {
  functions: {
    "canOnlyBeReverted(uint256)": FunctionFragment;
    "deviationSatisfied(uint256)": FunctionFragment;
    "exchange(bytes32,uint256,address,bytes32)": FunctionFragment;
    "exchangeFromCollateral(bytes32,uint256,address,bytes32,bytes32,uint256)": FunctionFragment;
    "rollback(uint256)": FunctionFragment;
    "setExitPositionOnly(bool)": FunctionFragment;
    "setFoundationFeeHolder(address)": FunctionFragment;
    "settle(uint256)": FunctionFragment;
    "settlementDelayPassed(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canOnlyBeReverted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deviationSatisfied",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BytesLike, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFromCollateral",
    values: [
      BytesLike,
      BigNumberish,
      string,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rollback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitPositionOnly",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFoundationFeeHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementDelayPassed",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "canOnlyBeReverted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deviationSatisfied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFromCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExitPositionOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFoundationFeeHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settlementDelayPassed",
    data: BytesLike
  ): Result;

  events: {};
}

export class IExchangeSystem extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IExchangeSystemInterface;

  functions: {
    canOnlyBeReverted(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canOnlyBeReverted(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deviationSatisfied(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { satisfied: boolean; destAmount: BigNumber }
    >;

    "deviationSatisfied(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { satisfied: boolean; destAmount: BigNumber }
    >;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exchange(bytes32,uint256,address,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exchangeFromCollateral(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exchangeFromCollateral(bytes32,uint256,address,bytes32,bytes32,uint256)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rollback(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rollback(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setExitPositionOnly(
      newValue: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setExitPositionOnly(bool)"(
      newValue: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFoundationFeeHolder(
      _foundationFeeHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFoundationFeeHolder(address)"(
      _foundationFeeHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settle(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settle(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settlementDelayPassed(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "settlementDelayPassed(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  canOnlyBeReverted(
    pendingExchangeEntryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canOnlyBeReverted(uint256)"(
    pendingExchangeEntryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deviationSatisfied(
    pendingExchangeEntryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { satisfied: boolean; destAmount: BigNumber }
  >;

  "deviationSatisfied(uint256)"(
    pendingExchangeEntryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { satisfied: boolean; destAmount: BigNumber }
  >;

  exchange(
    sourceKey: BytesLike,
    sourceAmount: BigNumberish,
    destAddress: string,
    destKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exchange(bytes32,uint256,address,bytes32)"(
    sourceKey: BytesLike,
    sourceAmount: BigNumberish,
    destAddress: string,
    destKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exchangeFromCollateral(
    sourceKey: BytesLike,
    sourceAmount: BigNumberish,
    destAddress: string,
    destKey: BytesLike,
    unStakeCurrency: BytesLike,
    unStakeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exchangeFromCollateral(bytes32,uint256,address,bytes32,bytes32,uint256)"(
    sourceKey: BytesLike,
    sourceAmount: BigNumberish,
    destAddress: string,
    destKey: BytesLike,
    unStakeCurrency: BytesLike,
    unStakeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rollback(
    pendingExchangeEntryId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rollback(uint256)"(
    pendingExchangeEntryId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setExitPositionOnly(
    newValue: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setExitPositionOnly(bool)"(
    newValue: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFoundationFeeHolder(
    _foundationFeeHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFoundationFeeHolder(address)"(
    _foundationFeeHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settle(
    pendingExchangeEntryId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settle(uint256)"(
    pendingExchangeEntryId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settlementDelayPassed(
    pendingExchangeEntryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "settlementDelayPassed(uint256)"(
    pendingExchangeEntryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    canOnlyBeReverted(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canOnlyBeReverted(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deviationSatisfied(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { satisfied: boolean; destAmount: BigNumber }
    >;

    "deviationSatisfied(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { satisfied: boolean; destAmount: BigNumber }
    >;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchange(bytes32,uint256,address,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeFromCollateral(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchangeFromCollateral(bytes32,uint256,address,bytes32,bytes32,uint256)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rollback(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rollback(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExitPositionOnly(
      newValue: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExitPositionOnly(bool)"(
      newValue: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFoundationFeeHolder(
      _foundationFeeHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFoundationFeeHolder(address)"(
      _foundationFeeHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "settle(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settlementDelayPassed(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "settlementDelayPassed(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    canOnlyBeReverted(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canOnlyBeReverted(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deviationSatisfied(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deviationSatisfied(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exchange(bytes32,uint256,address,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exchangeFromCollateral(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exchangeFromCollateral(bytes32,uint256,address,bytes32,bytes32,uint256)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rollback(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rollback(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setExitPositionOnly(
      newValue: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setExitPositionOnly(bool)"(
      newValue: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFoundationFeeHolder(
      _foundationFeeHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFoundationFeeHolder(address)"(
      _foundationFeeHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settle(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settle(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settlementDelayPassed(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "settlementDelayPassed(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canOnlyBeReverted(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canOnlyBeReverted(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deviationSatisfied(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deviationSatisfied(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchange(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exchange(bytes32,uint256,address,bytes32)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exchangeFromCollateral(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exchangeFromCollateral(bytes32,uint256,address,bytes32,bytes32,uint256)"(
      sourceKey: BytesLike,
      sourceAmount: BigNumberish,
      destAddress: string,
      destKey: BytesLike,
      unStakeCurrency: BytesLike,
      unStakeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rollback(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rollback(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setExitPositionOnly(
      newValue: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setExitPositionOnly(bool)"(
      newValue: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFoundationFeeHolder(
      _foundationFeeHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFoundationFeeHolder(address)"(
      _foundationFeeHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settle(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settle(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settlementDelayPassed(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "settlementDelayPassed(uint256)"(
      pendingExchangeEntryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
